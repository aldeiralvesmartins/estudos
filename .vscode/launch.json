namespace App\Http\Controllers;

use App\Bo\PersonBo;
use Illuminate\Http\Request;

class PersonController extends Controller
{
    private $personBo;

    public function __construct()
    {
        $this->personBo = new PersonBo();
    }

    public function index()
    {
        $people = $this->personBo->getAll();
        return view('person.index', compact('people'));
    }

    public function create()
    {
        return view('person.create');
    }

    public function store(Request $request)
    {
        $data = $request->all();
        $this->personBo->save($data);
        return redirect()->route('person.index')->with('success', 'Person created successfully!');
    }

    public function show($id)
    {
        $person = $this->personBo->getById($id);
        return view('person.show', compact('person'));
    }

    public function edit($id)
    {
        $person = $this->personBo->getById($id);
        return view('person.edit', compact('person'));
    }

    public function update(Request $request, $id)
    {
        $data = $request->all();
        $this->personBo->update($data, $id);
        return redirect()->route('person.index')->with('success', 'Person updated successfully!');
    }

    public function destroy($id)
    {
        $this->personBo->delete($id);
        return redirect()->route('person.index')->with('success', 'Person deleted successfully!');
    }
}






namespace App\Bo;

use App\Dao\PersonDao;
use App\Models\Person;

class PersonBo
{
    private $personDao;

    public function __construct()
    {
        $this->personDao = new PersonDao();
    }

    public function getAll()
    {
        try {
            return $this->personDao->getAll();
        } catch (\Throwable $th) {
            throw $th;
        }
    }

    public function getById($id)
    {
        try {
            return $this->personDao->getById($id);
        } catch (\Throwable $th) {
            throw $th;
        }
    }

    public function save(array $data)
    {
        try {
            $person = new Person();
            $person->fill($data);
            return $this->personDao->save($person);
        } catch (\Throwable $th) {
            throw $th;
        }
    }

    public function update(array $data, $id)
    {
        try {
            $person = $this->personDao->getById($id);
            if ($person) {
                $person->fill($data);
                $person->id = $id;
                return $this->personDao->update($person);
            }
            return false;
        } catch (\Throwable $th) {
            throw $th;
        }
    }

    public function delete($id)
    {
        try {
            return $this->personDao->delete($id);
        } catch (\Throwable $th) {
            throw $th;
        }
    }
}








<?php

namespace App\Dao;

use Illuminate\Support\Facades\DB;
use App\Models\Person;

class PersonDao
{
    public function getAll()
    {
        try {
            return DB::table('person')->get();
        } catch (\Throwable $th) {
            throw $th;
        }
    }

    public function getById($id)
    {
        try {
            return DB::table('person')->where('id', $id)->first();
        } catch (\Throwable $th) {
            throw $th;
        }
    }

    public function save(Person $person)
    {
        try {
            $data = $person->toArray();
            unset($data['id']);
            return DB::table('person')->insertGetId($data);
        } catch (\Throwable $th) {
            throw $th;
        }
    }

    public function update(Person $person)
    {
        try {
            $data = $person->toArray();
            unset($data['id']);
            return DB::table('person')->where('id', $person->id)->update($data);
        } catch (\Throwable $th) {
            throw $th;
        }
    }

    public function delete($id)
    {
        try {
            return DB::table('person')->where('id', $id)->delete();
        } catch (\Throwable $th) {
            throw $th;
        }
    }
}




use Illuminate\Database\Seeder;
use App\Models\Person;

class PersonSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $person = new Person();
        $person->name = 'John Doe';
        $person->birth_date = '1990-01-01';
        $person->cpf = '12345678901';
        $person->number_rg = '1234567';
        $person->date_emission_rg = '2010-01-01';
        $person->organ_issuer_rg_id = 1;
        $person->state_organ_issuer_rg_id = 1;
        $person->naturalness_id = 1;
        $person->schooling_id = 1;
        $person->sex = 'masculino';
        $person->marital_status_id = 1;
        $person->date_marriage = '2020-01-01';
        $person->spouse_absent = 'nao';
        $person->partner_residing_together = 'sim';
        $person->illness_chronicle = 'nao';
        $person->person_deficient = 'nao';
        $person->recipient_Software_social = 'sim';
        $person->profession = 'Engenheiro';
        $person->situation_marketplace_work_id = 1;
        $person->name_mother = 'Maria Silva';
        $person->name_father = 'João Silva';
        $person->observation = 'Observação do João Doe';
        $person->save();
    }
}









<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Person extends Model
{
    use HasFactory;

    protected $fillable = [
        'name',
        'birth_date',
        'cpf',
        'number_rg',
        'date_emission_rg',
        'organ_issuer_rg_id',
        'state_organ_issuer_rg_id',
        'naturalness_id',
        'schooling_id',
        'sex',
        'marital_status__id',
        'date_marriage',
        'spouse_absent',
        'partner_residing_together',
        'illness_chronicle',
        'person_deficient',
        'recipient_Software_social',
        'profession',
        'situation_marketplace_work_id',
        'name_mother',
        'name_father',
        'observation'
    ];

    protected $dates = [
        'birth_date',
        'date_emission_rg',
        'date_marriage'
    ];

    public function organIssuerRg()
    {
        return $this->belongsTo(OrganIssuer::class);
    }

    public function stateOrganIssuerRg()
    {
        return $this->belongsTo(StateOrganIssuer::class);
    }

    public function naturalness()
    {
        return $this->belongsTo(Naturalness::class);
    }

    public function schooling()
    {
        return $this->belongsTo(Schooling::class);
    }

    public function maritalStatus()
    {
        return $this->belongsTo(MaritalStatus::class);
    }

    public function situationMarketplaceWork()
    {
        return $this->belongsTo(SituationMarketplaceWork::class);
    }
}

























{
    // Use o IntelliSense para saber mais sobre os atributos possíveis.
    // Focalizar para exibir as descrições dos atributos existentes.
    // Para obter mais informações, acesse: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Listen for Xdebug",
            "type": "php",
            "request": "launch",
            "port": 9003
        },
        {
            "name": "Launch currently open script",
            "type": "php",
            "request": "launch",
            "program": "${file}",
            "cwd": "${fileDirname}",
            "port": 0,
            "runtimeArgs": [
                "-dxdebug.start_with_request=yes"
            ],
            "env": {
                "XDEBUG_MODE": "debug,develop",
                "XDEBUG_CONFIG": "client_port=${port}"
            }
        },
        {
            "name": "Launch Built-in web server",
            "type": "php",
            "request": "launch",
            "runtimeArgs": [
                "-dxdebug.mode=debug",
                "-dxdebug.start_with_request=yes",
                "-S",
                "localhost:0"
            ],
            "program": "",
            "cwd": "${workspaceRoot}",
            "port": 9003,
            "serverReadyAction": {
                "pattern": "Development Server \\(http://localhost:([0-9]+)\\) started",
                "uriFormat": "http://localhost:%s",
                "action": "openExternally"
            }
        }
    ]
}
