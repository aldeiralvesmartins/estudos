{
  "person": {
    "main": {
      "name": "Eduardo Santos",
      "taxpayer": "13556743764",
      "birthdate": "1990-01-01",
      "rg_number": "8744315232",
      "dispatcher_agency_id": 1,
      "expedition_date_rg": "1990-01-01",
      "observation": "Observation",
      "name_mother": "Jane Doe",
      "name_father": "John Doe Sr.",
      "naturalness": "City",
      "nationality_id": 1,
      "gender": "Masculino",
      "schooling_id": 1,
      "marital_status_id": 1,
      "profession_id": 1,
      "work_status_id": 1,
      "has_social_benefits": true,
      "has_deficiencies": false,
      "has_chronic_diseases": false,
      "has_absent_partner": false,
      "is_family_chief": true,
      "has_protective_measure": true
    },
    "spouse": {
      "name": "Fernanda Lima",
      "taxpayer": "87433946552",
      "birthdate": "1992-02-02",
      "rg_number": "23455334174",
      "dispatcher_agency_id": 1,
      "expedition_date_rg": "1990-01-01",
      "observation": "Observation",
      "name_mother": "Jane Doe",
      "name_father": "John Doe Sr.",
      "naturalness": "City",
      "nationality_id": 1,
      "gender": "Feminino",
      "schooling_id": 1,
      "marital_status_id": 1,
      "profession_id": 1,
      "work_status_id": 1,
      "has_social_benefits": false,
      "has_deficiencies": false,
      "has_chronic_diseases": false,
      "has_absent_partner": false,
      "is_family_chief": false,
      "has_protective_measure": false
    },
    "adddresses": {
      "cep": "12345678",
      "street": "Rua Exemplo",
      "number": "123",
      "complement": "Apartamento 4",
      "neighborhood_id": "8h3V2i",
      "informal_urban_core_id": 1,
      "observation": "Observação do endereço"
    },
    "informal_urban_core": {
      "informal_core": "Núcleo Informal 1",
      "neighborhood_id": "8h3V2i"
    },
      "properties": {
      "reference_point": "Referência 1",
      "block": "Bloco A",
      "lote": "Lote 123",
      "area": 100.5,
      "number_of_buildings": 2
    },
    "residents": {
      "kinship_id": 2
    },
    "people_cid10": {
        "cid10_id": 9
    }

  }
}











// Example Form
$("#example-form").steps({
	headerTag: "h3",
	bodyTag: "section",
	transitionEffect: "slideLeft",
	// autoFocus: true,
});


$(document).ready(function() {
    $("#mainMaritalStatusId").on("change", function() {
        const valorSelecionado = $(this).val();
        console.log("Opção selecionada: " + valorSelecionado);
    });

    var proxButton = $("a[href='#next']");


    proxButton.on("click", function() {
        const elementSelectCivilState = $("#mainMaritalStatusId");
        var objetojQuery = $("div#example-form.wizard.clearfix");
        let configSteps = {}
        for(let item in objetojQuery[0]){
            configSteps = objetojQuery[0][item]
            break
        }

        //Salva dados da pessoa principal
        if(configSteps.state.currentIndex === 1){
            let formMain = document.getElementById("formMain")
            var formData = new FormData(formMain);
            var object = {};
        
            for (var entry of formData.entries()) {
                object[entry[0]] = entry[1];
            }

            console.log(object)
            console.dir(formMain)

        }

        if (elementSelectCivilState[0].dataset.type === 'main' &&
            configSteps.state.currentIndex === 1 &&
            elementSelectCivilState.val() === '6')
        {
            $("#example-form").steps("next", 1);
        }
    });

    var retornaButton = $("a[href='#previous']");

    retornaButton.on("click", function({target}) {

        var objetojQuery = $("div#example-form.wizard.clearfix");
        let configSteps = {}
        for(let item in objetojQuery[0]){
            configSteps = objetojQuery[0][item]
            break
        }


        const elementSelectCivilState = $("#mainMaritalStatusId");
        if (elementSelectCivilState[0].dataset.type === 'main' &&
            configSteps.state.currentIndex === 1 &&
            elementSelectCivilState.val() === '6') {
            $("#example-form").steps("previous", -1);
        }
    });
});












<div id="content-new-pessoa"></div>

<button type="button" id="btn-add-people">+ Dependentes</button>
<br>

<script>
var indexPerson = 2

document.getElementById('btn-add-people').addEventListener('click', () => {
  const newElement = document.createElement("div");
  newElement.innerHTML =  `
    <input type="text" name="pessoas[${indexPerson}][name]">
    <input type="text" name="pessoas[${indexPerson}][idade]">
    <input type="text" name="pessoas[${indexPerson}][email]">
    <input hidden value="false" name="pessoas[${indexPerson}][is_pricipal]">
  `;
  document.getElementById('content-new-pessoa').appendChild(newElement);
  indexPerson++;
});
</script>























msr88957@gmail.com
98653274
r2147258369R*
```
[14:45, 25/04/2023] Registra - Contagem: https://reurb.santaluzia.mg.gov.br/publicos/pre_cadastro/4
[14:46, 25/04/2023] Registra - Contagem: 048.667.266-28
[14:47, 25/04/2023] Registra - Contagem: 30/06/1978
[14:47, 25/04/2023] Registra - Contagem: Walbert Estevam Soares
```


@extends('layouts.app')

@section('content')
    <div class="container">
        <h1>Create Person</h1>
        <form method="POST" action="{{ route('person.store') }}">
            @csrf

            <div class="form-group row">
                <label for="name" class="col-md-4 col-form-label text-md-right">{{ __('Name') }}</label>

                <div class="col-md-6">
                    <input id="name" type="text" class="form-control @error('name') is-invalid @enderror" name="name" value="{{ old('name') }}" required autocomplete="name" autofocus>

                    @error('name')
                        <span class="invalid-feedback" role="alert">
                            <strong>{{ $message }}</strong>
                        </span>
                    @enderror
                </div>
            </div>

            <div class="form-group row">
                <label for="birth_date" class="col-md-4 col-form-label text-md-right">{{ __('Birth Date') }}</label>

                <div class="col-md-6">
                    <input id="birth_date" type="date" class="form-control @error('birth_date') is-invalid @enderror" name="birth_date" value="{{ old('birth_date') }}" autocomplete="birth_date">

                    @error('birth_date')
                        <span class="invalid-feedback" role="alert">
                            <strong>{{ $message }}</strong>
                        </span>
                    @enderror
                </div>
            </div>

            <div class="form-group row">
                <label for="cpf" class="col-md-4 col-form-label text-md-right">{{ __('CPF') }}</label>

                <div class="col-md-6">
                    <input id="cpf" type="text" class="form-control @error('cpf') is-invalid @enderror" name="cpf" value="{{ old('cpf') }}" required autocomplete="cpf">

                    @error('cpf')
                        <span class="invalid-feedback" role="alert">
                            <strong>{{ $message }}</strong>
                        </span>
                    @enderror
                </div>
            </div>

            <div class="form-group row">
                <label for="number_rg" class="col-md-4 col-form-label text-md-right">{{ __('Number RG') }}</label>

                <div class="col-md-6">
                    <input id="number_rg" type="text" class="form-control @error('number_rg') is-invalid @enderror" name="number_rg" value="{{ old('number_rg') }}" required autocomplete="number_rg">

                    @error('number_rg')
                        <span class="invalid-feedback" role="alert">
                            <strong>{{ $message }}</strong>
                        </span>
                    @enderror
                </div>
            </div>

            <div class="form-group row">
                <label for="date_emission_rg" class="col-md-4 col-form-label text-md-right">{{ __('Date of Emission RG') }}</label>

                <div class="col-md-6">
                    <input id="date_emission_rg" type="date" class="form-control @error('date_emission_rg') is-invalid @enderror" name="date_emission_rg" value="{{ old('date_emission_rg') }}" required autocomplete="date_emission_rg">

                    @error('date_emission_rg')
                        <span class="invalid-feedback" role="alert">
                            <strong>{{ $message }}</strong>
                        </span>
                    @enderror
                </div>
            </div>

           <div class="form-group row">
    <label for="organ_issuer_rg_id" class="col-sm-2 col-form-label">Orgão Expedidor do RG</label>
    <div class="col-sm-10">
        <input type="text" class="form-control" id="organ_issuer_rg_id" name="organ_issuer_rg_id">
    </div>
</div>

<div class="form-group row">
    <label for="state_organ_issuer_rg_id" class="col-sm-2 col-form-label">Estado do Órgão Expedidor</label>
    <div class="col-sm-10">
        <input type="text" class="form-control" id="state_organ_issuer_rg_id" name="state_organ_issuer_rg_id">
    </div>
</div>

<div class="form-group row">
    <label for="naturalness_id" class="col-sm-2 col-form-label">Naturalidade</label>
    <div class="col-sm-10">
        <input type="text" class="form-control" id="naturalness_id" name="naturalness_id">
    </div>
</div>

<div class="form-group row">
    <label for="schooling_id" class="col-sm-2 col-form-label">Escolaridade</label>
    <div class="col-sm-10">
        <input type="text" class="form-control" id="schooling_id" name="schooling_id">
    </div>
</div>

<div class="form-group row">
    <label for="sex" class="col-sm-2 col-form-label">Sexo</label>
    <div class="col-sm-10">
        <select class="form-control" id="sex" name="sex">
            <option value="masculino">Masculino</option>
            <option value="feminino">Feminino</option>
        </select>
    </div>
</div>

<div class="form-group row">
    <label for="marital_status__id" class="col-sm-2 col-form-label">Estado Civil</label>
    <div class="col-sm-10">
        <input type="text" class="form-control" id="marital_status__id" name="marital_status__id">
    </div>
</div>

<div class="form-group row">
    <label for="date_marriage" class="col-sm-2 col-form-label">Data de Casamento</label>
    <div class="col-sm-10">
        <input type="date" class="form-control" id="date_marriage" name="date_marriage">
    </div>
</div>

<div class="form-group row">
    <label for="spouse_absent" class="col-sm-2 col-form-label">Cônjuge Ausente</label>
    <div class="col-sm-10">
        <select class="form-control" id="spouse_absent" name="spouse_absent">
            <option value="sim">Sim</option>
            <option value="nao">Não</option>
        </select>
    </div>
</div>

<div class="form-group row">
    <label for="partner_residing_together" class="col-sm-2 col-form-label">Companheiro Residindo Junto</label>
    <div class="col-sm-10">
        <select class="form-control" id="partner_residing_together" name="partner_residing_together">
            <option value="sim">Sim</option>
         <option value="nao">Não</option>
        </select>
    </div>
</div>
<div class="form-group row">
    <label for="illness_chronicle" class="col-sm-2 col-form-label">Possui Doença Crônica</label>
    <div class="col-sm-10">
        <select class="form-control" id="illness_chronicle" name="illness_chronicle">
            <option value="sim">Sim</option>
            <option value="nao">Não</option>
        </select>
    </div>
</div>
<div class="form-group row">
    <label for="person_deficient" class="col-sm-2 col-form-label">Pessoa com Deficiência</label>
    <div class="col-sm-10">
        <select class="form-control" id="person_deficient" name="person_deficient">
            <option value="sim">Sim</option>
            <option value="nao">Não</option>
        </select>
    </div>
</div>
<div class="form-group row">
    <label for="recipient_Software_social" class="col-sm-2 col-form-label">Recebe Benefício Social de Programa de Software</label>
    <div class="col-sm-10">
        <select class="form-control" id="recipient_Software_social" name="recipient_Software_social">
            <option value="sim">Sim</option>
            <option value="nao">Não</option>
        </select>
    </div>
</div>
<div class="form-group row">
    <label for="profession" class="col-sm-2 col-form-label">Profissão</label>
    <div class="col-sm-10">
        <input type="text" class="form-control" id="profession" name="profession">
    </div>
</div>
<div class="form-group row">
    <label for="situation_marketplace_work_id" class="col-sm-2 col-form-label">Situação no Mercado de Trabalho</label>
    <div class="col-sm-10">
        <select class="form-control" id="situation_marketplace_work_id" name="situation_marketplace_work_id">
            <option value="" disabled selected>Selecione uma opção</option>
            @foreach ($situationMarketplaceWorks as $situationMarketplaceWork)
                <option value="{{ $situationMarketplaceWork->id }}">{{ $situationMarketplaceWork->description }}</option>
            @endforeach
        </select>
    </div>
</div>
<div class="form-group row">
    <label for="name_mother" class="col-sm-2 col-form-label">Nome da Mãe</label>
    <div class="col-sm-10">
        <input type="text" class="form-control" id="name_mother" name="name_mother">
    </div>
</div>
<div class="form-group row">
    <label for="name_father" class="col-sm-2 col-form-label">Nome do Pai</label>
    <div class="col-sm-10">
        <input type="text" class="form-control" id="name_father" name="name_father">
    </div>
</div>
<div class="form-group row">
    <label for="observation" class="col-sm-2 col-form-label">Observações</label>
    <div class="col-sm-10">
        <textarea class="form-control" id="observation" name="observation" rows="3"></textarea>
    </div>
</div>  
</div>
<div class="card-footer">
    <button type="submit" class="btn btn-primary">Salvar</button>
    <a class="btn btn-secondary" href="{{ route('person.index') }}">Cancelar</a>
</div>
</form>
@endsection











use App\Http\Controllers\PersonController;

Route::get('/persons', [PersonController::class, 'index'])->name('person.index');
Route::get('/persons/create', [PersonController::class, 'create'])->name('person.create');
Route::post('/persons', [PersonController::class, 'store'])->name('person.store');
Route::get('/persons/{id}', [PersonController::class, 'show'])->name('person.show');
Route::get('/persons/{id}/edit', [PersonController::class, 'edit'])->name('person.edit');
Route::put('/persons/{id}', [PersonController::class, 'update'])->name('person.update');
Route::delete('/persons/{id}', [PersonController::class, 'destroy'])->name('person.destroy');










namespace App\Http\Controllers;

use App\Bo\PersonBo;
use Illuminate\Http\Request;

class PersonController extends Controller
{
    private $personBo;

    public function __construct()
    {
        $this->personBo = new PersonBo();
    }

    public function index()
    {
        $people = $this->personBo->getAll();
        return view('person.index', compact('people'));
    }

    public function create()
    {
        return view('person.create');
    }

    public function store(Request $request)
    {
        $data = $request->all();
        $this->personBo->save($data);
        return redirect()->route('person.index')->with('success', 'Person created successfully!');
    }

    public function show($id)
    {
        $person = $this->personBo->getById($id);
        return view('person.show', compact('person'));
    }

    public function edit($id)
    {
        $person = $this->personBo->getById($id);
        return view('person.edit', compact('person'));
    }

    public function update(Request $request, $id)
    {
        $data = $request->all();
        $this->personBo->update($data, $id);
        return redirect()->route('person.index')->with('success', 'Person updated successfully!');
    }

    public function destroy($id)
    {
        $this->personBo->delete($id);
        return redirect()->route('person.index')->with('success', 'Person deleted successfully!');
    }
}






namespace App\Bo;

use App\Dao\PersonDao;
use App\Models\Person;

class PersonBo
{
    private $personDao;

    public function __construct()
    {
        $this->personDao = new PersonDao();
    }

    public function getAll()
    {
        try {
            return $this->personDao->getAll();
        } catch (\Throwable $th) {
            throw $th;
        }
    }

    public function getById($id)
    {
        try {
            return $this->personDao->getById($id);
        } catch (\Throwable $th) {
            throw $th;
        }
    }

    public function save(array $data)
    {
        try {
            $person = new Person();
            $person->fill($data);
            return $this->personDao->save($person);
        } catch (\Throwable $th) {
            throw $th;
        }
    }

    public function update(array $data, $id)
    {
        try {
            $person = $this->personDao->getById($id);
            if ($person) {
                $person->fill($data);
                $person->id = $id;
                return $this->personDao->update($person);
            }
            return false;
        } catch (\Throwable $th) {
            throw $th;
        }
    }

    public function delete($id)
    {
        try {
            return $this->personDao->delete($id);
        } catch (\Throwable $th) {
            throw $th;
        }
    }
}








<?php

namespace App\Dao;

use Illuminate\Support\Facades\DB;
use App\Models\Person;

class PersonDao
{
    public function getAll()
    {
        try {
            return DB::table('person')->get();
        } catch (\Throwable $th) {
            throw $th;
        }
    }

    public function getById($id)
    {
        try {
            return DB::table('person')->where('id', $id)->first();
        } catch (\Throwable $th) {
            throw $th;
        }
    }

    public function save(Person $person)
    {
        try {
            $data = $person->toArray();
            unset($data['id']);
            return DB::table('person')->insertGetId($data);
        } catch (\Throwable $th) {
            throw $th;
        }
    }

    public function update(Person $person)
    {
        try {
            $data = $person->toArray();
            unset($data['id']);
            return DB::table('person')->where('id', $person->id)->update($data);
        } catch (\Throwable $th) {
            throw $th;
        }
    }

    public function delete($id)
    {
        try {
            return DB::table('person')->where('id', $id)->delete();
        } catch (\Throwable $th) {
            throw $th;
        }
    }
}




use Illuminate\Database\Seeder;
use App\Models\Person;

class PersonSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $person = new Person();
        $person->name = 'John Doe';
        $person->birth_date = '1990-01-01';
        $person->cpf = '12345678901';
        $person->number_rg = '1234567';
        $person->date_emission_rg = '2010-01-01';
        $person->organ_issuer_rg_id = 1;
        $person->state_organ_issuer_rg_id = 1;
        $person->naturalness_id = 1;
        $person->schooling_id = 1;
        $person->sex = 'masculino';
        $person->marital_status_id = 1;
        $person->date_marriage = '2020-01-01';
        $person->spouse_absent = 'nao';
        $person->partner_residing_together = 'sim';
        $person->illness_chronicle = 'nao';
        $person->person_deficient = 'nao';
        $person->recipient_Software_social = 'sim';
        $person->profession = 'Engenheiro';
        $person->situation_marketplace_work_id = 1;
        $person->name_mother = 'Maria Silva';
        $person->name_father = 'João Silva';
        $person->observation = 'Observação do João Doe';
        $person->save();
    }
}



<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Schooling extends Model
{
    use HasFactory;

    protected $fillable = ['name'];

    public function people()
    {
        return $this->hasMany(Person::class, 'schooling_id');
    }
}






<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Person extends Model
{
    use HasFactory;

    protected $fillable = [
        'name',
        'birth_date',
        'cpf',
        'number_rg',
        'date_emission_rg',
        'organ_issuer_rg_id',
        'state_organ_issuer_rg_id',
        'naturalness_id',
        'schooling_id',
        'sex',
        'marital_status__id',
        'date_marriage',
        'spouse_absent',
        'partner_residing_together',
        'illness_chronicle',
        'person_deficient',
        'recipient_Software_social',
        'profession',
        'situation_marketplace_work_id',
        'name_mother',
        'name_father',
        'observation'
    ];

    protected $dates = [
        'birth_date',
        'date_emission_rg',
        'date_marriage'
    ];

    public function organIssuerRg()
    {
        return $this->belongsTo(OrganIssuer::class);
    }

    public function stateOrganIssuerRg()
    {
        return $this->belongsTo(StateOrganIssuer::class);
    }

    public function naturalness()
    {
        return $this->belongsTo(Naturalness::class);
    }

    public function schooling()
    {
        return $this->belongsTo(Schooling::class);
    }

    public function maritalStatus()
    {
        return $this->belongsTo(MaritalStatus::class);
    }

    public function situationMarketplaceWork()
    {
        return $this->belongsTo(SituationMarketplaceWork::class);
    }
}

























{
    // Use o IntelliSense para saber mais sobre os atributos possíveis.
    // Focalizar para exibir as descrições dos atributos existentes.
    // Para obter mais informações, acesse: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Listen for Xdebug",
            "type": "php",
            "request": "launch",
            "port": 9003
        },
        {
            "name": "Launch currently open script",
            "type": "php",
            "request": "launch",
            "program": "${file}",
            "cwd": "${fileDirname}",
            "port": 0,
            "runtimeArgs": [
                "-dxdebug.start_with_request=yes"
            ],
            "env": {
                "XDEBUG_MODE": "debug,develop",
                "XDEBUG_CONFIG": "client_port=${port}"
            }
        },
        {
            "name": "Launch Built-in web server",
            "type": "php",
            "request": "launch",
            "runtimeArgs": [
                "-dxdebug.mode=debug",
                "-dxdebug.start_with_request=yes",
                "-S",
                "localhost:0"
            ],
            "program": "",
            "cwd": "${workspaceRoot}",
            "port": 9003,
            "serverReadyAction": {
                "pattern": "Development Server \\(http://localhost:([0-9]+)\\) started",
                "uriFormat": "http://localhost:%s",
                "action": "openExternally"
            }
        }
    ]
}
