O link de acesso ao cadastro de clientes na área pública foi copiado com êxito.



 1 - Arquivo de Configuração Principal:

O arquivo principal de configuração do Apache geralmente é chamado de httpd.conf ou apache2.conf. Verifique se há configurações fora dos blocos <VirtualHost> nesse arquivo.
Use um editor de texto para examinar o conteúdo do arquivo:
---------------------------------------------------------------------
Copy code
sudo nano /etc/apache2/apache2.conf
---------------------------------------------------------------------

 2 - Diretórios conf-available e conf-enabled:

Em alguns sistemas, especialmente aqueles que utilizam a estrutura de configuração modular, as configurações globais podem ser distribuídas em vários arquivos dentro dos diretórios conf-available e conf-enabled.
Verifique os arquivos dentro desses diretórios para garantir que não contenham configurações que estejam interferindo nos VirtualHosts:
---------------------------------------------------------------------
Copy code
ls /etc/apache2/conf-available/
ls /etc/apache2/conf-enabled/
---------------------------------------------------------------------

 3 - Módulos Ativados:

Certifique-se de que apenas os módulos necessários estejam ativados. Isso pode ser feito usando os comandos a2enmod e a2dismod. Alguns módulos podem afetar globalmente o comportamento do Apache.
---------------------------------------------------------------------
Copy code
sudo a2dismod nomedomodulo
sudo a2enmod nomedomodulo
---------------------------------------------------------------------
 
 4 - Arquivos .htaccess:

Verifique se há arquivos .htaccess em diretórios específicos que possam estar interferindo no roteamento. Os arquivos .htaccess contêm configurações que podem afetar globalmente o comportamento do Apache.

 5 - Verificação de Erros nos Logs do Apache:

Examine os logs de erro do Apache (/var/log/apache2/error.log) em busca de mensagens que possam indicar configurações problemáticas ou conflitos.

 6 - Ordem de Carregamento de Configurações:

Confirme a ordem em que os arquivos de configuração são carregados. Às vezes, a ordem pode afetar o resultado final. Isso pode ser controlado pela diretiva Include no arquivo principal de configuração.
 
 7 - Reinicie o Apache:

Após fazer alterações nas configurações, sempre reinicie o Apache para que as mudanças tenham efeito:
---------------------------------------------------------------------
Copy code
sudo service apache2 restart
---------------------------------------------------------------------




































































































https://www.google.com.br/maps/@-15.753179,-49.3165956,3a,15y,338.17h,84.18t/data=!3m6!1e1!3m4!1saES7N6lubxnk-t3_eYVztg!2e0!7i16384!8i8192?entry=ttu


Udemy - ricardo.r2soft@gmail.com - r2369147258
Alura - ricardo.r2soft@gmail.com  - r2147258369R*
FullCycle - ricardo.r2soft@gmail.com  - r214258369


https://cursos.alura.com.br/course/websockets-comunicacoes-tempo-real-socket-io-mongodb



https://codepen.io/msezan/pen/dyQPqYp


https://codepen.io/Ishrat_Pinky/pen/qepqqr

<div class="spinner-wrapper">
    <div class="loading-spinner ">
    </div>
</div>
<script>
    window.addEventListener('load', function () {
        document.querySelector('.spinner-wrapper').style.display = 'none';
    });
</script>

https://codepen.io/Basel-a-k/pen/poVObdd

https://sadservers.com/scenarios











https://freehtml5.co/personal-free-html5-bootstrap-website-template/
https://codepen.io/Amayzin/pen/xemJEX
https://codepen.io/augustinhiebel/pen/qBjrOMy





































MXMQUYT815-eyJsaWNlbnNlSWQiOiJNWE1RVVlUODE1IiwibGljZW5zZWVOYW1lIjoiSHVuYW4gSW5zdGl0dXRlIG9mIFNjaWVuY2UgYW5kIFRlY2hub2xvZ3kiLCJhc3NpZ25lZU5hbWUiOiJqaWtlIGNvZGUiLCJhc3NpZ25lZUVtYWlsIjoiamV0YnJhaW5zMjMwMjA2QG91dGxvb2suY29tIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiRm9yIGVkdWNhdGlvbmFsIHVzZSBvbmx5IiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJEUE4iLCJwYWlkVXBUbyI6IjIwMjQtMDItMDkiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IkRCIiwicGFpZFVwVG8iOiIyMDI0LTAyLTA5IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJQUyIsInBhaWRVcFRvIjoiMjAyNC0wMi0wOSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMjQtMDItMDkiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlJTQyIsInBhaWRVcFRvIjoiMjAyNC0wMi0wOSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJHTyIsInBhaWRVcFRvIjoiMjAyNC0wMi0wOSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiRE0iLCJwYWlkVXBUbyI6IjIwMjQtMDItMDkiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlJTRiIsInBhaWRVcFRvIjoiMjAyNC0wMi0wOSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJEUyIsInBhaWRVcFRvIjoiMjAyNC0wMi0wOSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMjQtMDItMDkiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlJDIiwicGFpZFVwVG8iOiIyMDI0LTAyLTA5IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAyNC0wMi0wOSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMjQtMDItMDkiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlJEIiwicGFpZFVwVG8iOiIyMDI0LTAyLTA5IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSUzAiLCJwYWlkVXBUbyI6IjIwMjQtMDItMDkiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDI0LTAyLTA5IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjAyNC0wMi0wOSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUlNWIiwicGFpZFVwVG8iOiIyMDI0LTAyLTA5IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IkRDIiwicGFpZFVwVG8iOiIyMDI0LTAyLTA5IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSU1UiLCJwYWlkVXBUbyI6IjIwMjQtMDItMDkiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IkRQIiwicGFpZFVwVG8iOiIyMDI0LTAyLTA5IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBEQiIsInBhaWRVcFRvIjoiMjAyNC0wMi0wOSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJwYWlkVXBUbyI6IjIwMjQtMDItMDkiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFNJIiwicGFpZFVwVG8iOiIyMDI0LTAyLTA5IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBQUyIsInBhaWRVcFRvIjoiMjAyNC0wMi0wOSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQQ1dNUCIsInBhaWRVcFRvIjoiMjAyNC0wMi0wOSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQR08iLCJwYWlkVXBUbyI6IjIwMjQtMDItMDkiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFBDIiwicGFpZFVwVG8iOiIyMDI0LTAyLTA5IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBSQiIsInBhaWRVcFRvIjoiMjAyNC0wMi0wOSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQU1ciLCJwYWlkVXBUbyI6IjIwMjQtMDItMDkiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUlMiLCJwYWlkVXBUbyI6IjIwMjQtMDItMDkiLCJleHRlbmRlZCI6dHJ1ZX1dLCJtZXRhZGF0YSI6IjAxMjAyMzAyMDZMUEFBMDA4MDA5IiwiaGFzaCI6IjQyNTQ5NjcyLzIwMDk1Nzk5Oi03OTk2MzgyNTgiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-OXfbtL5lwz9bDhPZ0POhH6h8h1ubDm0bzkRWX33IjJlRmK4BkGzO65BWjIJ+ndT0stY8uOUWo4FM1Aej+YGXMTlyD3rcCBkcFN6dB6FEVelLYoBevxN9myhp0IGvfHaLQ6hoVxAKr0AkSAlSsgKVN6gOYw7Nn8lR/ivpuXXteZWiG4x7KCxHM/6/oPXAbQQmD1sy2q05s1tsvxBltZbsFJ3/Yv6lG89h0YlN9FvFciqUM6B1Cc5Fo7a6oUOfpyCJKPSwzyzkxLOhlL4QO6/LfQ3zNO9wirnz506mZXh3oB+wS1gDFLk7RehEQMqdqnjh+zaNKi1QKB/cyK1Op0oDTQ==-MIIETDCCAjSgAwIBAgIBDzANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIyMTAxMDE2MDU0NFoXDTI0MTAxMTE2MDU0NFowHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMjEwMTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC/W3uCpU5M2y48rUR/3fFR6y4xj1nOm3rIuGp2brELVGzdgK2BezjnDXpAxVDw5657hBkAUMoyByiDs2MgmVi9IcqdAwpk988/Daaajq9xuU1of59jH9eQ9c3BmsEtdA4boN3VpenYKATwmpKYkJKVc07ZKoXL6kSyZuF7Jq7HoQZcclChbF75QJPGbri3cw9vDk/e46kuzfwpGftvl6+vKibpInO6Dv0ocwImDbOutyZC7E+BwpEm1TJZW4XovMBegHhWC04cJvpH1u98xoR94ichw0jKhdppywARe43rGU96163RckIuFmFDQKZV9SMUrwpQFu4Z2D5yTNqnlLRfAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQU5FZqQ4gnVc+inIeZF+o3ID+VhcEwSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBANLG1anEKid4W87vQkqWaQTkRtFKJ2GFtBeMhvLhIyM6Cg3FdQnMZr0qr9mlV0w289pf/+M14J7S7SgsfwxMJvFbw9gZlwHvhBl24N349GuthshGO9P9eKmNPgyTJzTtw6FedXrrHV99nC7spaY84e+DqfHGYOzMJDrg8xHDYLLHk5Q2z5TlrztXMbtLhjPKrc2+ZajFFshgE5eowfkutSYxeX8uA5czFNT1ZxmDwX1KIelbqhh6XkMQFJui8v8Eo396/sN3RAQSfvBd7Syhch2vlaMP4FAB11AlMKO2x/1hoKiHBU3oU3OKRTfoUTfy1uH3T+t03k1Qkr0dqgHLxiv6QU5WrarR9tx/dapqbsSmrYapmJ7S5+ghc4FTWxXJB1cjJRh3X+gwJIHjOVW+5ZVqXTG2s2Jwi2daDt6XYeigxgL2SlQpeL5kvXNCcuSJurJVcRZFYUkzVv85XfDauqGxYqaehPcK2TzmcXOUWPfxQxLJd2TrqSiO+mseqqkNTb3ZDiYS/ZqdQoGYIUwJqXo+EDgqlmuWUhkWwCkyo4rtTZeAj+nP00v3n8JmXtO30Fip+lxpfsVR3tO1hk4Vi2kmVjXyRkW2G7D7WAVt+91ahFoSeRWlKyb4KcvGvwUaa43fWLem2hyI4di2pZdr3fcYJ3xvL5ejL3m14bKsfoOv


















https://www.jetbrains.com/pt-br/phpstorm/nextversion/


https://github.com/mesinkasir/Lablog.git
https://github.com/samia13/blog/tree/main
https://github.com/yshir/laravel-blog-template/tree/master


$ips = array(
    '192.168.0.1',
    '192.168.0.2',
    '192.168.0.3'
);

$url = 'https://www.exemplo.com'; // URL do site que deseja acessar

// Seleciona um IP aleatório do array
$randomIP = $ips[array_rand($ips)];

// Configura as opções do cURL
$options = array(
    CURLOPT_URL => $url,
    CURLOPT_RETURNTRANSFER => true,
    CURLOPT_HTTPHEADER => array(
        'X-Forwarded-For: ' . $randomIP,
        'Client-IP: ' . $randomIP
    )
);

// Inicializa o cURL
$curl = curl_init();
curl_setopt_array($curl, $options);

// Executa a requisição
$response = curl_exec($curl);

// Verifica a resposta do servidor
if ($response === false) {
    echo 'Falha ao simular acesso ao site.';
} else {
    echo 'Acesso ao site simulado com sucesso.';
}

// Fecha o cURL
curl_close($curl);








<?php
    $url = 'https://animelandiabr.com.br'; // URL do site que deseja simular o acesso

    // Envia uma solicitação GET para a URL
    for ($i = 0; $i < 1000; $i++) {
        $response = file_get_contents($url);
    }
    // Verifica a resposta do servidor
    if ($response === false) {
        echo 'Falha ao simular acesso ao site.';
    } else {
        echo 'Acesso ao site simulado com sucesso.';
    }
    ?>












https://github.com/Bekzodbekxon/form-wizard.git
<?php

namespace App\Bo;

use App\Models\Core\PeopleCid10;

class PeopleCId10Bo
{
    public function __construct()
    {
        parent::__construct(new PeopleCid10());
    }

    public function insertPerson($data)
    {
        return $this->person->store($data);
    }


}


<?php

namespace App\Bo;


use App\Models\Social\InformalUrbanCore;
use App\Repositories\BaseRepository;

class InformalUrbanCoreBo extends BaseRepository
{
    public function __construct()
    {
        parent::__construct(new InformalUrbanCore());
    }

    public function store($request): InformalUrbanCore
    {
        return parent::store($request);
    }



}


public function store(PersonRequest $request)
    {

        $data = $request->all();
        DB::beginTransaction();
        try {
       $peopleMain = $this->personBO->insertPerson($data['person']['main']);

        if (!empty($data['person']['people_cid10'])) {
            $peopleMain->peopleCid10()->createMany([
                $data['person']['people_cid10']
            ]);
        }

        if(!empty($data['person']['spouse'])){
            $personSpouse = $this->personBO->insertPerson($data['person']['spouse']);

            $personSpouseData['married_date'] = $data['married_date'] ?? '2023-10-12';

            $peopleMain->spouse()->create([
                'person_id' => $peopleMain->id,
                'spouse_people_id' =>  $personSpouse->id ?? 17,
                'married_date' =>  $personSpouseData['married_date'] ?? '2023-10-12',
            ]);

            if (!empty($data['person']['people_cid10'])) {
                $personSpouse->peopleCid10()->createMany([
                    $data['person']['people_cid10']
                ]);
            }
        }

        if(!empty($data['person']['adddresses'])){

            if(!empty($data['person']['informal_urban_core'])){

                $informalUrbanCore = new InformalUrbanCoreBo();
                $informalUrbanCore->store([
                    'informal_core' => $data['person']['informal_urban_core']['informal_core'],
                    'neighborhood_id' => $data['person']['informal_urban_core']['neighborhood_id']
                ]);
                $data['person']['adddresses']['informal_urban_core_id'] = $informalUrbanCore->id;
                $address = $informalUrbanCore->addresses()->create($data['person']['addresses']);

                #Adiciona o endereço na pessoa principal
                $peopleMain->address_id = $address->id;
                $peopleMain->save();

                $personSpouse->address_id = $address->id;
                $personSpouse->save();
                $data['person']['properties']['person_id'] = $peopleMain->id;
                $data['person']['properties']['address_id'] = $address->id;

                $peopleMain->property()->create($data['person']['properties']['person_id']);
            }
        }

        if (!empty($data['person']['residents'])) {
            $data['person']['residents']['person_id'] = $peopleMain->id;
            $data['person']['residents']['resident_id'] = $personSpouse->id;
            $peopleMain->resident()->createMany($data['person']['residents']);
        }
            DB::commit();

        } catch (\Exception $e) {
            DB::rollback();
            throw $e;
        }
        return response()->json(['message' => 'Person created successfully'], 201);
    }

{
  "person": {
    "main": {
      "name": "Eduardo Santos",
      "taxpayer": "13556743764",
      "birthdate": "1990-01-01",
      "rg_number": "8744315232",
      "dispatcher_agency_id": 1,
      "expedition_date_rg": "1990-01-01",
      "observation": "Observation",
      "name_mother": "Jane Doe",
      "name_father": "John Doe Sr.",
      "naturalness": "City",
      "nationality_id": 1,
      "gender": "Masculino",
      "schooling_id": 1,
      "marital_status_id": 1,
      "profession_id": 1,
      "work_status_id": 1,
      "has_social_benefits": true,
      "has_deficiencies": false,
      "has_chronic_diseases": false,
      "has_absent_partner": false,
      "is_family_chief": true,
      "has_protective_measure": true
    },
    "spouse": {
      "name": "Fernanda Lima",
      "taxpayer": "87433946552",
      "birthdate": "1992-02-02",
      "rg_number": "23455334174",
      "dispatcher_agency_id": 1,
      "expedition_date_rg": "1990-01-01",
      "observation": "Observation",
      "name_mother": "Jane Doe",
      "name_father": "John Doe Sr.",
      "naturalness": "City",
      "nationality_id": 1,
      "gender": "Feminino",
      "schooling_id": 1,
      "marital_status_id": 1,
      "profession_id": 1,
      "work_status_id": 1,
      "has_social_benefits": false,
      "has_deficiencies": false,
      "has_chronic_diseases": false,
      "has_absent_partner": false,
      "is_family_chief": false,
      "has_protective_measure": false
    },
    "adddresses": {
      "cep": "12345678",
      "street": "Rua Exemplo",
      "number": "123",
      "complement": "Apartamento 4",
      "neighborhood_id": "8h3V2i",
      "informal_urban_core_id": 1,
      "observation": "Observação do endereço"
    },
    "informal_urban_core": {
      "informal_core": "Núcleo Informal 1",
      "neighborhood_id": "8h3V2i"
    },
      "properties": {
      "reference_point": "Referência 1",
      "block": "Bloco A",
      "lote": "Lote 123",
      "area": 100.5,
      "number_of_buildings": 2
    },
    "residents": {
      "kinship_id": 2
    },
    "people_cid10": {
        "cid10_id": 9
    }

  }
}











// Example Form
$("#example-form").steps({
	headerTag: "h3",
	bodyTag: "section",
	transitionEffect: "slideLeft",
	// autoFocus: true,
});


$(document).ready(function() {
    $("#mainMaritalStatusId").on("change", function() {
        const valorSelecionado = $(this).val();
        console.log("Opção selecionada: " + valorSelecionado);
    });

    var proxButton = $("a[href='#next']");


    proxButton.on("click", function() {
        const elementSelectCivilState = $("#mainMaritalStatusId");
        var objetojQuery = $("div#example-form.wizard.clearfix");
        let configSteps = {}
        for(let item in objetojQuery[0]){
            configSteps = objetojQuery[0][item]
            break
        }

        //Salva dados da pessoa principal
        if(configSteps.state.currentIndex === 1){
            let formMain = document.getElementById("formMain")
            var formData = new FormData(formMain);
            var object = {};
        
            for (var entry of formData.entries()) {
                object[entry[0]] = entry[1];
            }

            console.log(object)
            console.dir(formMain)

        }

        if (elementSelectCivilState[0].dataset.type === 'main' &&
            configSteps.state.currentIndex === 1 &&
            elementSelectCivilState.val() === '6')
        {
            $("#example-form").steps("next", 1);
        }
    });

    var retornaButton = $("a[href='#previous']");

    retornaButton.on("click", function({target}) {

        var objetojQuery = $("div#example-form.wizard.clearfix");
        let configSteps = {}
        for(let item in objetojQuery[0]){
            configSteps = objetojQuery[0][item]
            break
        }


        const elementSelectCivilState = $("#mainMaritalStatusId");
        if (elementSelectCivilState[0].dataset.type === 'main' &&
            configSteps.state.currentIndex === 1 &&
            elementSelectCivilState.val() === '6') {
            $("#example-form").steps("previous", -1);
        }
    });
});












<div id="content-new-pessoa"></div>

<button type="button" id="btn-add-people">+ Dependentes</button>
<br>

<script>
var indexPerson = 2

document.getElementById('btn-add-people').addEventListener('click', () => {
  const newElement = document.createElement("div");
  newElement.innerHTML =  `
    <input type="text" name="pessoas[${indexPerson}][name]">
    <input type="text" name="pessoas[${indexPerson}][idade]">
    <input type="text" name="pessoas[${indexPerson}][email]">
    <input hidden value="false" name="pessoas[${indexPerson}][is_pricipal]">
  `;
  document.getElementById('content-new-pessoa').appendChild(newElement);
  indexPerson++;
});
</script>























msr88957@gmail.com
98653274
r2147258369R*
```
[14:45, 25/04/2023] Registra - Contagem: https://reurb.santaluzia.mg.gov.br/publicos/pre_cadastro/4
[14:46, 25/04/2023] Registra - Contagem: 048.667.266-28
[14:47, 25/04/2023] Registra - Contagem: 30/06/1978
[14:47, 25/04/2023] Registra - Contagem: Walbert Estevam Soares
```


@extends('layouts.app')

@section('content')
    <div class="container">
        <h1>Create Person</h1>
        <form method="POST" action="{{ route('person.store') }}">
            @csrf

            <div class="form-group row">
                <label for="name" class="col-md-4 col-form-label text-md-right">{{ __('Name') }}</label>

                <div class="col-md-6">
                    <input id="name" type="text" class="form-control @error('name') is-invalid @enderror" name="name" value="{{ old('name') }}" required autocomplete="name" autofocus>

                    @error('name')
                        <span class="invalid-feedback" role="alert">
                            <strong>{{ $message }}</strong>
                        </span>
                    @enderror
                </div>
            </div>

            <div class="form-group row">
                <label for="birth_date" class="col-md-4 col-form-label text-md-right">{{ __('Birth Date') }}</label>

                <div class="col-md-6">
                    <input id="birth_date" type="date" class="form-control @error('birth_date') is-invalid @enderror" name="birth_date" value="{{ old('birth_date') }}" autocomplete="birth_date">

                    @error('birth_date')
                        <span class="invalid-feedback" role="alert">
                            <strong>{{ $message }}</strong>
                        </span>
                    @enderror
                </div>
            </div>

            <div class="form-group row">
                <label for="cpf" class="col-md-4 col-form-label text-md-right">{{ __('CPF') }}</label>

                <div class="col-md-6">
                    <input id="cpf" type="text" class="form-control @error('cpf') is-invalid @enderror" name="cpf" value="{{ old('cpf') }}" required autocomplete="cpf">

                    @error('cpf')
                        <span class="invalid-feedback" role="alert">
                            <strong>{{ $message }}</strong>
                        </span>
                    @enderror
                </div>
            </div>

            <div class="form-group row">
                <label for="number_rg" class="col-md-4 col-form-label text-md-right">{{ __('Number RG') }}</label>

                <div class="col-md-6">
                    <input id="number_rg" type="text" class="form-control @error('number_rg') is-invalid @enderror" name="number_rg" value="{{ old('number_rg') }}" required autocomplete="number_rg">

                    @error('number_rg')
                        <span class="invalid-feedback" role="alert">
                            <strong>{{ $message }}</strong>
                        </span>
                    @enderror
                </div>
            </div>

            <div class="form-group row">
                <label for="date_emission_rg" class="col-md-4 col-form-label text-md-right">{{ __('Date of Emission RG') }}</label>

                <div class="col-md-6">
                    <input id="date_emission_rg" type="date" class="form-control @error('date_emission_rg') is-invalid @enderror" name="date_emission_rg" value="{{ old('date_emission_rg') }}" required autocomplete="date_emission_rg">

                    @error('date_emission_rg')
                        <span class="invalid-feedback" role="alert">
                            <strong>{{ $message }}</strong>
                        </span>
                    @enderror
                </div>
            </div>

           <div class="form-group row">
    <label for="organ_issuer_rg_id" class="col-sm-2 col-form-label">Orgão Expedidor do RG</label>
    <div class="col-sm-10">
        <input type="text" class="form-control" id="organ_issuer_rg_id" name="organ_issuer_rg_id">
    </div>
</div>

<div class="form-group row">
    <label for="state_organ_issuer_rg_id" class="col-sm-2 col-form-label">Estado do Órgão Expedidor</label>
    <div class="col-sm-10">
        <input type="text" class="form-control" id="state_organ_issuer_rg_id" name="state_organ_issuer_rg_id">
    </div>
</div>

<div class="form-group row">
    <label for="naturalness_id" class="col-sm-2 col-form-label">Naturalidade</label>
    <div class="col-sm-10">
        <input type="text" class="form-control" id="naturalness_id" name="naturalness_id">
    </div>
</div>

<div class="form-group row">
    <label for="schooling_id" class="col-sm-2 col-form-label">Escolaridade</label>
    <div class="col-sm-10">
        <input type="text" class="form-control" id="schooling_id" name="schooling_id">
    </div>
</div>

<div class="form-group row">
    <label for="sex" class="col-sm-2 col-form-label">Sexo</label>
    <div class="col-sm-10">
        <select class="form-control" id="sex" name="sex">
            <option value="masculino">Masculino</option>
            <option value="feminino">Feminino</option>
        </select>
    </div>
</div>

<div class="form-group row">
    <label for="marital_status__id" class="col-sm-2 col-form-label">Estado Civil</label>
    <div class="col-sm-10">
        <input type="text" class="form-control" id="marital_status__id" name="marital_status__id">
    </div>
</div>

<div class="form-group row">
    <label for="date_marriage" class="col-sm-2 col-form-label">Data de Casamento</label>
    <div class="col-sm-10">
        <input type="date" class="form-control" id="date_marriage" name="date_marriage">
    </div>
</div>

<div class="form-group row">
    <label for="spouse_absent" class="col-sm-2 col-form-label">Cônjuge Ausente</label>
    <div class="col-sm-10">
        <select class="form-control" id="spouse_absent" name="spouse_absent">
            <option value="sim">Sim</option>
            <option value="nao">Não</option>
        </select>
    </div>
</div>

<div class="form-group row">
    <label for="partner_residing_together" class="col-sm-2 col-form-label">Companheiro Residindo Junto</label>
    <div class="col-sm-10">
        <select class="form-control" id="partner_residing_together" name="partner_residing_together">
            <option value="sim">Sim</option>
         <option value="nao">Não</option>
        </select>
    </div>
</div>
<div class="form-group row">
    <label for="illness_chronicle" class="col-sm-2 col-form-label">Possui Doença Crônica</label>
    <div class="col-sm-10">
        <select class="form-control" id="illness_chronicle" name="illness_chronicle">
            <option value="sim">Sim</option>
            <option value="nao">Não</option>
        </select>
    </div>
</div>
<div class="form-group row">
    <label for="person_deficient" class="col-sm-2 col-form-label">Pessoa com Deficiência</label>
    <div class="col-sm-10">
        <select class="form-control" id="person_deficient" name="person_deficient">
            <option value="sim">Sim</option>
            <option value="nao">Não</option>
        </select>
    </div>
</div>
<div class="form-group row">
    <label for="recipient_Software_social" class="col-sm-2 col-form-label">Recebe Benefício Social de Programa de Software</label>
    <div class="col-sm-10">
        <select class="form-control" id="recipient_Software_social" name="recipient_Software_social">
            <option value="sim">Sim</option>
            <option value="nao">Não</option>
        </select>
    </div>
</div>
<div class="form-group row">
    <label for="profession" class="col-sm-2 col-form-label">Profissão</label>
    <div class="col-sm-10">
        <input type="text" class="form-control" id="profession" name="profession">
    </div>
</div>
<div class="form-group row">
    <label for="situation_marketplace_work_id" class="col-sm-2 col-form-label">Situação no Mercado de Trabalho</label>
    <div class="col-sm-10">
        <select class="form-control" id="situation_marketplace_work_id" name="situation_marketplace_work_id">
            <option value="" disabled selected>Selecione uma opção</option>
            @foreach ($situationMarketplaceWorks as $situationMarketplaceWork)
                <option value="{{ $situationMarketplaceWork->id }}">{{ $situationMarketplaceWork->description }}</option>
            @endforeach
        </select>
    </div>
</div>
<div class="form-group row">
    <label for="name_mother" class="col-sm-2 col-form-label">Nome da Mãe</label>
    <div class="col-sm-10">
        <input type="text" class="form-control" id="name_mother" name="name_mother">
    </div>
</div>
<div class="form-group row">
    <label for="name_father" class="col-sm-2 col-form-label">Nome do Pai</label>
    <div class="col-sm-10">
        <input type="text" class="form-control" id="name_father" name="name_father">
    </div>
</div>
<div class="form-group row">
    <label for="observation" class="col-sm-2 col-form-label">Observações</label>
    <div class="col-sm-10">
        <textarea class="form-control" id="observation" name="observation" rows="3"></textarea>
    </div>
</div>  
</div>
<div class="card-footer">
    <button type="submit" class="btn btn-primary">Salvar</button>
    <a class="btn btn-secondary" href="{{ route('person.index') }}">Cancelar</a>
</div>
</form>
@endsection











use App\Http\Controllers\PersonController;

Route::get('/persons', [PersonController::class, 'index'])->name('person.index');
Route::get('/persons/create', [PersonController::class, 'create'])->name('person.create');
Route::post('/persons', [PersonController::class, 'store'])->name('person.store');
Route::get('/persons/{id}', [PersonController::class, 'show'])->name('person.show');
Route::get('/persons/{id}/edit', [PersonController::class, 'edit'])->name('person.edit');
Route::put('/persons/{id}', [PersonController::class, 'update'])->name('person.update');
Route::delete('/persons/{id}', [PersonController::class, 'destroy'])->name('person.destroy');










namespace App\Http\Controllers;

use App\Bo\PersonBo;
use Illuminate\Http\Request;

class PersonController extends Controller
{
    private $personBo;

    public function __construct()
    {
        $this->personBo = new PersonBo();
    }

    public function index()
    {
        $people = $this->personBo->getAll();
        return view('person.index', compact('people'));
    }

    public function create()
    {
        return view('person.create');
    }

    public function store(Request $request)
    {
        $data = $request->all();
        $this->personBo->save($data);
        return redirect()->route('person.index')->with('success', 'Person created successfully!');
    }

    public function show($id)
    {
        $person = $this->personBo->getById($id);
        return view('person.show', compact('person'));
    }

    public function edit($id)
    {
        $person = $this->personBo->getById($id);
        return view('person.edit', compact('person'));
    }

    public function update(Request $request, $id)
    {
        $data = $request->all();
        $this->personBo->update($data, $id);
        return redirect()->route('person.index')->with('success', 'Person updated successfully!');
    }

    public function destroy($id)
    {
        $this->personBo->delete($id);
        return redirect()->route('person.index')->with('success', 'Person deleted successfully!');
    }
}






namespace App\Bo;

use App\Dao\PersonDao;
use App\Models\Person;

class PersonBo
{
    private $personDao;

    public function __construct()
    {
        $this->personDao = new PersonDao();
    }

    public function getAll()
    {
        try {
            return $this->personDao->getAll();
        } catch (\Throwable $th) {
            throw $th;
        }
    }

    public function getById($id)
    {
        try {
            return $this->personDao->getById($id);
        } catch (\Throwable $th) {
            throw $th;
        }
    }

    public function save(array $data)
    {
        try {
            $person = new Person();
            $person->fill($data);
            return $this->personDao->save($person);
        } catch (\Throwable $th) {
            throw $th;
        }
    }

    public function update(array $data, $id)
    {
        try {
            $person = $this->personDao->getById($id);
            if ($person) {
                $person->fill($data);
                $person->id = $id;
                return $this->personDao->update($person);
            }
            return false;
        } catch (\Throwable $th) {
            throw $th;
        }
    }

    public function delete($id)
    {
        try {
            return $this->personDao->delete($id);
        } catch (\Throwable $th) {
            throw $th;
        }
    }
}








<?php

namespace App\Dao;

use Illuminate\Support\Facades\DB;
use App\Models\Person;

class PersonDao
{
    public function getAll()
    {
        try {
            return DB::table('person')->get();
        } catch (\Throwable $th) {
            throw $th;
        }
    }

    public function getById($id)
    {
        try {
            return DB::table('person')->where('id', $id)->first();
        } catch (\Throwable $th) {
            throw $th;
        }
    }

    public function save(Person $person)
    {
        try {
            $data = $person->toArray();
            unset($data['id']);
            return DB::table('person')->insertGetId($data);
        } catch (\Throwable $th) {
            throw $th;
        }
    }

    public function update(Person $person)
    {
        try {
            $data = $person->toArray();
            unset($data['id']);
            return DB::table('person')->where('id', $person->id)->update($data);
        } catch (\Throwable $th) {
            throw $th;
        }
    }

    public function delete($id)
    {
        try {
            return DB::table('person')->where('id', $id)->delete();
        } catch (\Throwable $th) {
            throw $th;
        }
    }
}




use Illuminate\Database\Seeder;
use App\Models\Person;

class PersonSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $person = new Person();
        $person->name = 'John Doe';
        $person->birth_date = '1990-01-01';
        $person->cpf = '12345678901';
        $person->number_rg = '1234567';
        $person->date_emission_rg = '2010-01-01';
        $person->organ_issuer_rg_id = 1;
        $person->state_organ_issuer_rg_id = 1;
        $person->naturalness_id = 1;
        $person->schooling_id = 1;
        $person->sex = 'masculino';
        $person->marital_status_id = 1;
        $person->date_marriage = '2020-01-01';
        $person->spouse_absent = 'nao';
        $person->partner_residing_together = 'sim';
        $person->illness_chronicle = 'nao';
        $person->person_deficient = 'nao';
        $person->recipient_Software_social = 'sim';
        $person->profession = 'Engenheiro';
        $person->situation_marketplace_work_id = 1;
        $person->name_mother = 'Maria Silva';
        $person->name_father = 'João Silva';
        $person->observation = 'Observação do João Doe';
        $person->save();
    }
}



<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Schooling extends Model
{
    use HasFactory;

    protected $fillable = ['name'];

    public function people()
    {
        return $this->hasMany(Person::class, 'schooling_id');
    }
}






<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Person extends Model
{
    use HasFactory;

    protected $fillable = [
        'name',
        'birth_date',
        'cpf',
        'number_rg',
        'date_emission_rg',
        'organ_issuer_rg_id',
        'state_organ_issuer_rg_id',
        'naturalness_id',
        'schooling_id',
        'sex',
        'marital_status__id',
        'date_marriage',
        'spouse_absent',
        'partner_residing_together',
        'illness_chronicle',
        'person_deficient',
        'recipient_Software_social',
        'profession',
        'situation_marketplace_work_id',
        'name_mother',
        'name_father',
        'observation'
    ];

    protected $dates = [
        'birth_date',
        'date_emission_rg',
        'date_marriage'
    ];

    public function organIssuerRg()
    {
        return $this->belongsTo(OrganIssuer::class);
    }

    public function stateOrganIssuerRg()
    {
        return $this->belongsTo(StateOrganIssuer::class);
    }

    public function naturalness()
    {
        return $this->belongsTo(Naturalness::class);
    }

    public function schooling()
    {
        return $this->belongsTo(Schooling::class);
    }

    public function maritalStatus()
    {
        return $this->belongsTo(MaritalStatus::class);
    }

    public function situationMarketplaceWork()
    {
        return $this->belongsTo(SituationMarketplaceWork::class);
    }
}

























{
    // Use o IntelliSense para saber mais sobre os atributos possíveis.
    // Focalizar para exibir as descrições dos atributos existentes.
    // Para obter mais informações, acesse: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Listen for Xdebug",
            "type": "php",
            "request": "launch",
            "port": 9003
        },
        {
            "name": "Launch currently open script",
            "type": "php",
            "request": "launch",
            "program": "${file}",
            "cwd": "${fileDirname}",
            "port": 0,
            "runtimeArgs": [
                "-dxdebug.start_with_request=yes"
            ],
            "env": {
                "XDEBUG_MODE": "debug,develop",
                "XDEBUG_CONFIG": "client_port=${port}"
            }
        },
        {
            "name": "Launch Built-in web server",
            "type": "php",
            "request": "launch",
            "runtimeArgs": [
                "-dxdebug.mode=debug",
                "-dxdebug.start_with_request=yes",
                "-S",
                "localhost:0"
            ],
            "program": "",
            "cwd": "${workspaceRoot}",
            "port": 9003,
            "serverReadyAction": {
                "pattern": "Development Server \\(http://localhost:([0-9]+)\\) started",
                "uriFormat": "http://localhost:%s",
                "action": "openExternally"
            }
        }
    ]
}
https://r2loteamentos.r2soft.com.br/infoIndice.php?key=cjJzb2Z0IGluZm9ybcOhdGljYSBlIHNvZnR3YXJlcyBsdGRh



<?php

namespace App\Service\Celcoin;

use App\isR2Aplicativos;
use App\logofoto;
use App\Service\R2CnpjService;
use ClassRegistry;
use DateTime;
use Exception;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\ClientException;
use GuzzleHttp\Exception\GuzzleException;
use GuzzleHttp\Exception\RequestException;

/**
 * Serviço de integração com a API do Celcoin para geração de boletos.
 */
class CelcoinService
{
    protected array $token;
    private array $url;
    private array $dados;

    public function __construct($dados)
    {
        $enverimenteCashUrl = getenv('CELCOIN_API_CASH_URL');
        $this->url = [
            'authDevCach' => "$enverimenteCashUrl/token",
            'criarCobrancaBoletoPix' => "$enverimenteCashUrl/charges",
            'criarOuEditarConta' => "$enverimenteCashUrl/company/subaccount",
            'criarCliente' => "$enverimenteCashUrl/customers",
            'buscaConta' => "$enverimenteCashUrl/company/subaccounts",
            'verifyDocument' => "$enverimenteCashUrl/company/mandatory-documents",
            'webhook' => "$enverimenteCashUrl/webhooks",
        ];
        $this->dados = $dados;
        $this->authCelCash();
    }

    /**
     * Auth.
     * @throws GuzzleException
     * @throws Exception
     */
    public function authDev($dados)
    {
        $client = new Client();
        $data = [
            'grant_type' => 'client_credentials',
            'client_id' => $dados['conta_api_key'] ?? getenv('CELCOIN_CLIENT_ID'),
            'client_secret' => $dados['conta_api_secret'] ?? getenv('CELCOIN_CLIENT_SECRET'),
        ];
        $url = !empty($dados['conta_api_key']) ? $this->url['authDev'] : $this->url['authDevCach'];
        try {
            $this->token = json_decode($client->post($url, ['form_params' => $data, 'headers' => ['Content-Type' => 'application/x-www-form-urlencoded']])->getBody(), true);
        } catch (RequestException $e) {
            throw new Exception($e->getMessage(), 1001);
        }
    }

    /**
     * Auth.
     * @throws GuzzleException
     * @throws Exception
     */
    public function authCelCash(): void
    {
        $client = new Client();
        $galaxIdAndGalaxHash = $this->dados['conta_api_key'] ?? $this->dados['Conta']['api_key'] ?? null;
        $scope = 'customers.read customers.write plans.read plans.write webhooks.write cards.read cards.write card-brands.read boletos.read carnes.read payment-methods.read company.write company.read';
        if (!empty($this->dados['action']) && in_array($this->dados['action'], ['editjuridica', 'addContaR2'])) {
            $galaxIdAndGalaxHash = getenv('CELCOIN_CLIENT_SECRET');
            $scope = 'charges.write charges.read transactions.read transactions.write customers.read customers.write plans.read plans.write webhooks.write cards.read cards.write card-brands.read boletos.read carnes.read payment-methods.read company.write company.read';
        } elseif (!empty($this->dados['action']) && in_array($this->dados['action'], ['imprimirBoletoViaApi', 'imprimirVariosBoletosViaApi'])) {
            $scope = 'charges.write customers.read customers.write plans.read plans.write webhooks.write cards.read cards.write card-brands.read boletos.read carnes.read payment-methods.read';
        }
        $data = ['headers' => ['Authorization' => 'Basic ' . base64_encode($galaxIdAndGalaxHash), 'Content-Type' => 'application/json'], 'json' => ['grant_type' => 'authorization_code', 'scope' => $scope]];
        try {
            $this->token = json_decode($client->post($this->url['authDevCach'], $data)->getBody(), true);
        } catch (ClientException $e) {
            $messageError = $this->tratarErroClientException($e, 'falha na autentificação, entre em contato com nosso suporte.', 'authCelCash');
            throw new Exception($messageError, 1001);
        }
    }

    /**
     * Criar Cobranca.
     * @return array|true
     * @throws GuzzleException
     * @throws Exception
     */
    public function criarCobrancaBoletoPix(): bool|array
    {
        $client = $this->getGuzzleHttpClient();
        try {
            if (!empty($this->dados['id_boleto']) && !empty($this->dados['movimentacao_id'])) {
                $dados = $this->consultarBoletoPix();
                if (!empty($dados['Charges'])) {
                    return $this->trataRetornoCobranca($dados);
                }
            }
            $response = $client->post($this->url['criarCobrancaBoletoPix'], ['headers' => $this->prepareHeaders(), 'json' => $this->prepararDadosParaGerarCobranca()]);
            $retorno = json_decode($response->getBody()->getContents(), true);
            sleep(5);
            return $this->trataRetornoCobranca($retorno);
        } catch (ClientException $e) {
            $messageError = $this->tratarErroClientException($e, 'Não foi possível criar cobrança, entre em contato com nosso suporte.', 'criarCobrancaBoletoPix');
            throw new Exception($messageError, 1001);
        }
    }

    /**
     * Criar Cobranca.
     *
     * @return array|true
     * @throws GuzzleException
     * @throws Exception
     */
    public function atualizaCobrancaBoletoPix(): bool|array
    {
        if (empty($this->dados['id_boleto']) || empty($this->dados['movimentacao_id'])) {
            throw new Exception('Boleto não encontrado entre em contato com o suporte', 1001);
        }
        $client = $this->getGuzzleHttpClient();
        try {
            $response = $client->put($this->url['criarCobrancaBoletoPix'] . '/' . $this->dados['movimentacao_id'] . '/myId',
                ['headers' => $this->prepareHeaders(), 'json' => [
                    'payedOutsideGalaxPay' => true
                ]]);
            $retorno = json_decode($response->getBody()->getContents(), true);
            sleep(5);
            return $this->trataRetornoCobranca($retorno);
        } catch (ClientException $e) {
            $messageError = 'Não foi possivel cria conta, entre em contato com nosso suporte';
            $error = json_decode($e->getResponse()->getBody()->getContents(), true);
            if (!empty($error['error']['message'])) {
                $messageError = $error['error']['message'];
            }
            throw new Exception($messageError . " Linha: {$e->getLine()}", 1001);
        }
    }

    /**
     * Criar Cobranca.
     *
     * @return array|true
     * @throws GuzzleException
     * @throws Exception
     */
    private function consultarBoletoPix(): bool|array
    {
        $client = $this->getGuzzleHttpClient();
        try {
            $response = $client->get($this->url['criarCobrancaBoletoPix'] . "?myIds={$this->dados['movimentacao_id']}&startAt=0&limit=1", ['headers' => $this->prepareHeaders()]);
            return json_decode($response->getBody()->getContents(), true);
        } catch (ClientException $e) {
            $messageError = $this->tratarErroClientException($e, 'Ocorreu um erro ao processar a solicitação.', 'consultarBoletoPix');
            throw new Exception($messageError, 1001);
        }
    }

    /**
     * Remove Cobranca.
     *
     * @return array|true
     * @throws GuzzleException
     * @throws Exception
     */
    public function removerCobranca(): bool|array
    {
        $client = $this->getGuzzleHttpClient();
        try {
            $response = $client->delete("{$this->url['criarCobrancaBoletoPix']}/{$this->dados['movimentacao_id']}/myId", ['headers' => $this->prepareHeaders()]);
            $retorno = json_decode($response->getBody()->getContents(), true);
            if (empty($retorno['type'])) {
                return throw new Exception('Ocorreu um erro ao processar a solicitação.', 1001);
            }
            return $this->trataRetornoRemoveCobranca();
        } catch (ClientException $e) {
            $messageError = $this->tratarErroClientException($e, 'Ocorreu um erro ao processar a solicitação.', 'removerCobranca');
            throw new Exception($messageError, 1001);
        }
    }

    /**
     * Cria SubConta.
     *
     * @return array|true
     * @throws GuzzleException
     * @throws Exception
     */
    public function CriarSubContaCelCash(): bool|array
    {
        $client = $this->getGuzzleHttpClient();
        try {
//            $existeConta = $this->verificarSeExisteContaParaCpfCnpj();
//            if (!empty($existeConta)) {
//                return $this->trataRetorno($existeConta);
//            }
            $response = $client->post($this->url['criarOuEditarConta'],
                ['headers' => $this->prepareHeaders(), 'json' => $this->prepararDadosParaGerarSubContaCelCash()]);
            $retorno = json_decode($response->getBody()->getContents(), true);
            if (empty($retorno['type'])) {
                return throw new Exception('Ocorreu um erro ao criar a conta.', 1001);
            }
            return $this->trataRetorno($retorno['Company']);
        } catch (ClientException $e) {
            $messageError = $this->tratarErroClientException($e, 'Ocorreu um erro ao processar a solicitação.', 'CriarSubContaCelCash');
            throw new Exception($messageError, 1001);
        }
    }

    /**
     * Cria Cliente.
     *
     * @return array|true
     * @throws GuzzleException
     * @throws Exception
     */
    private function buscarOuCriarClienteCobrancaAvulsa(): bool|array
    {
        $client = $this->getGuzzleHttpClient();
        try {
            $existeConta = $this->buscaClienteCelCash();
            if (!empty($existeConta['Customers'][0])) {
                return $existeConta['Customers'][0];
            }
            $response = $client->post($this->url['criarCliente'], ['headers' => $this->prepareHeaders(), 'json' => $this->montaCustumer()]);
            $retorno = json_decode($response->getBody()->getContents(), true);
            if (empty($retorno['type']) || empty($retorno['Customer'])) {
                return throw new Exception('Ocorreu um erro ao criar a conta.', 1001);
            }
            return $retorno['Customer'];
        } catch (ClientException $e) {
            $messageError = $this->tratarErroClientException($e, 'Ocorreu um erro ao processar a solicitação.', 'buscarOuCriarClienteCobrancaAvulsa');
            throw new Exception($messageError, 1001);
        }
    }

    /**
     * Editar Subconta.
     *
     * @return array|true
     * @throws GuzzleException
     * @throws Exception
     */
    public function editarSubContaCelCash(): bool|array
    {
        $client = $this->getGuzzleHttpClient();
        try {
            $response = $client->put($this->url['criarOuEditarConta'] . '/' . $this->dados['Conta']['numero'],
                ['headers' => $this->prepareHeaders(), 'json' => $this->montaDadosEditarConta()]);
            $retorno = json_decode($response->getBody()->getContents(), true);
            if (empty($retorno['type'])) {
                return throw new Exception('Ocorreu um erro ao editar a conta.', 1001);
            }
            return $retorno['type'];
        } catch (ClientException $e) {
            $messageError = $this->tratarErroClientException($e, 'Ocorreu um erro ao processar a solicitação.', 'editarSubContaCelCash');
            throw new Exception($messageError, 1001);
        }
    }

    /**
     * Listar Subcontas.
     *
     * @return array|true
     * @throws GuzzleException
     * @throws Exception
     */
    public function buscaSubContaCelCash(): bool|array
    {
        $hasCpfCnpj = $this->dados['dado_empresa']['Pessoa']['cpf_cnpj'] ?? $this->dados['dado_responsavel']['Pessoa']['cpf_cnpj'];
        $cpfCnpj = $this->removerCaracteresNaoNumericDoTexto($hasCpfCnpj);
        $client = $this->getGuzzleHttpClient();
        try {
            $response = $client->get($this->url['buscaConta'] . "?documents=$cpfCnpj&limit=1&startAt=0", ['headers' => $this->prepareHeaders()]);
            return json_decode($response->getBody()->getContents(), true);
        } catch (ClientException $e) {
            $messageError = $this->tratarErroClientException($e, 'Ocorreu um erro ao processar a solicitação.', 'buscaSubContaCelCash');
            throw new Exception($messageError, 1001);
        }
    }

    /**
     * Listar Cliente.
     *
     * @return array|true
     * @throws GuzzleException
     * @throws Exception
     */
    public function buscaClienteCelCash(): bool|array
    {
        $cpfCnpj = $this->removerCaracteresNaoNumericDoTexto($this->dados['pagador']['documento']);
        $client = $this->getGuzzleHttpClient();
        try {
            $response = $client->get($this->url['criarCliente'] . "?documents=$cpfCnpj&startAt=0&limit=1", ['headers' => $this->prepareHeaders()]);
            return json_decode($response->getBody()->getContents(), true);
        } catch (ClientException $e) {
            $messageError = $this->tratarErroClientException($e, 'Ocorreu um erro ao processar a solicitação.', 'buscaClienteCelCash');
            throw new Exception($messageError, 1001);
        }
    }

    /**
     * Verifica Documento SubConta.
     *
     * @return array|true
     * @throws GuzzleException
     * @throws Exception
     */
    public function verificaDocumentoObrigatorioSubconta(): bool|array
    {
        $client = $this->getGuzzleHttpClient();
        try {
            $response = $client->post($this->url['verifyDocument'], ['headers' => $this->prepareHeaders(), 'json' => $this->prepararDadosParaVerificaDocumento()]);
            $retorno = json_decode($response->getBody()->getContents(), true);
            if (empty($retorno['type'])) {
                return throw new Exception('Ocorreu um erro ao criar a conta.', 1001);
            }
            return true;
        } catch (ClientException $e) {
            $messageError = $this->tratarErroClientException($e, 'Ocorreu um erro ao processar a solicitação.', 'verificaDocumentoObrigatorioSubcontaTipoCNPJ');
            throw new Exception($messageError, 1001);
        }
    }

    private function prepararDadosParaVerificaDocumento(): array
    {
        return $this->isJuridica() ? $this->montaEnvioDocumentoObrigatorioSubcontaTipoCNPJ() : $this->montaEnvioDocumentoObrigatorioSubcontaTipoCPF();
    }

    /**
     * @throws Exception
     */
    private function trataRetorno($dados): array
    {
        $apiKey = isset($dados['ApiAuth']['galaxId'], $dados['ApiAuth']['galaxHash'])
            ? $dados['ApiAuth']['galaxId'] . ':' . $dados['ApiAuth']['galaxHash']
            : $dados['wallet_id'] . ':' . $dados['api_key'];
        return [
            'pessoa_id' => $this->dados['dado_empresa']['Pessoa']['id'] ?? $this->dados['dado_responsavel']['Pessoa']['id'],
            'numero' => $dados['galaxPayId'] ?? $dados['numero'],
            'digito_verificador' => '0',
            'api_key' => $apiKey,
            'api_secret' => $dados['ApiAuth']['publicToken'] ?? $dados['api_key'],
            'username' => $dados['ApiAuth']['confirmHashWebhook'] ?? $dados['api_key'],
        ];
    }

    /**
     * @return array
     * @throws Exception
     * @throws GuzzleException
     */
    private function prepararDadosParaGerarCobranca(): array
    {
        $valorEmCentavos = (int) round($this->dados['valor'] * 100);
        $info = $this->removerAcentos($this->dados['descricaoDemonstrativo'][0]);
        $dados = [
            'myId' => $this->dados['movimentacao_id'],                          //string-255 Id referente no seu sistema, para salvar no cel_cash.
            'value' => $valorEmCentavos,                                        //int-11 Preço em centavos.
            'additionalInfo' => $info,                                          //Texto livre dedicado a informações adicionais internas.
            'payday' => $this->dados['dataVencimento'],                         //Data de vencimento do pagamento.
            'payedOutsideGalaxPay' => false,                                    //bool Define se a cobrança foi paga fora do sistema do cel_cash. Exemplo: dinheiro, transferência. Use esse campo para que o cel_cash não cobre esse pagamento do seu cliente, já que este já foi pago de outra forma.
            'mainPaymentMethodId' => 'boleto',                                  //string-30 PaymentMethod.id Id do pagamento principal. Ou seja, quando forem cadastradas novas transações, irá considerar esse pagamento.
            'Customer' => $this->buscarOuCriarClienteCobrancaAvulsa(),
            'PaymentMethodBoleto' => $this->montaPaymentMethodBoleto(),
            'PaymentMethodPix' => $this->montaPaymentMethodPix(),
        ];
        $split = $this->montaSplit();
        if (!empty($split)) {
            $dados = array_merge($dados, $split);
        }
        return $dados;
    }

    /**
     * @return array
     * @throws Exception
     */
    private function prepararDadosParaGerarSubContaCelCash(): array
    {
        return $this->isJuridica() ? $this->montaResponsavelPelaConta() : $this->montaProprietarioDaConta();
    }

    private function isJuridica(): bool
    {
        return !empty(!empty($this->dados['dado_empresa']['responsavel']['tipo_pessoa']) && $this->dados['dado_empresa']['responsavel']['tipo_pessoa'] == 'J');
    }

    /**
     * @return bool | array
     * @throws Exception
     */
    private function trataRetornoRemoveCobranca(): bool|array
    {
        try {
            $modelo = $this->getModelItemRessa();
            $itemremessa = $modelo->find('first', [
                'conditions' => [
                    'Itemremessa.id_boleto' => $this->dados['id_boleto'],
                    'Itemremessa.numero_documento' => $this->dados['numero_documento'],
                    'Itemremessa.movimentacao_id' => $this->dados['movimentacao_id'],
                    'Itemremessa.numero_banco' => '509'
                ],
                'order' => ['Itemremessa.created' => 'DESC']]);
            if (!$itemremessa) {
                throw new Exception('Item de remessa não encontrado para os dados fornecidos.');
            }
            $modelo->updateAll(
                ['Itemremessa.ativo' => 'true'],
                [
                    'Itemremessa.id_boleto' => $this->dados['id_boleto'],
                    'Itemremessa.numero_documento' => $this->dados['numero_documento'],
                    'Itemremessa.movimentacao_id' => $this->dados['movimentacao_id'],
                    'Itemremessa.numero_banco' => '509'
                ]);
            $itemremessa['Itemremessa'] = array_merge($itemremessa['Itemremessa'], ['tipo' => 'REMESSA']);
            $itemremessa['Itemremessa']['ativo'] = true;
            if (!$modelo->save($itemremessa)) {
                throw new Exception('Erro ao salvar atualização do item de remessa.');
            }
            $situacao = 'Pedido de Baixa via API';
            $modelo->create();
            $success = $modelo->save([
                'Itemremessa' => [
                    'movimentacao_id' => $itemremessa['Itemremessa']['movimentacao_id'],
                    'situacao' => $situacao,
                    'identificacao_ocorrencia' => '99',
                    'numero_documento' => $itemremessa['Itemremessa']['numero_documento'],
                    'data_ocorrencia' => $itemremessa['Itemremessa']['data_ocorrencia'],
                    'ativo' => true,
                    'pessoa_id' => $itemremessa['Itemremessa']['pessoa_id'] ?? null,
                    'nosso_numero' => $itemremessa['Itemremessa']['nosso_numero'] ?? null,
                    'cedente' => $itemremessa['Itemremessa']['cedente'] ?? null,
                    'data_vencimento' => $itemremessa['Itemremessa']['data_vencimento'] ?? null,
                    'valor' => $itemremessa['Itemremessa']['valor'] ?? null,
                    'tipo' => 'REMESSA',
                    'numero_banco' => $itemremessa['Itemremessa']['numero_banco'] ?? null,
                    'id_boleto' => $itemremessa['Itemremessa']['id_boleto'] ?? null,
                    'linha_digitavel' => $itemremessa['Itemremessa']['linha_digitavel'] ?? null,
                    'modified' => date('Y-m-d H:i:s')
                ]
            ]);
            if (!$success) {
                throw new Exception('Erro ao salvar novo registro de remessa.');
            }
            $itemremessaId = $modelo->id;
            $arquivosItemremessaModel = $this->getModelArquivoItemRessa();
            $data = [
                'ArquivosItemremessa' => [
                    'itemremessa_id' => $itemremessaId,
                    'arquivo_id' => 0,
                    'linha' => '1'
                ]
            ];
            if (!$arquivosItemremessaModel->save($data)) {
                throw new Exception('Erro ao salvar vínculo entre item de remessa e arquivo.');
            }
            return true;
        } catch (Exception $e) {
            throw new Exception('Erro em trataRetornoRemoveCobranca: ' . $e->getMessage());
        }
    }

    /**
     * @param $cobranca
     * @return bool | array
     * @throws Exception
     */
    private function trataRetornoCobranca($cobranca): bool|array
    {
        if (!empty($cobranca['Charge']['Customer']['galaxPayId'])) {
            $this->CriaVinculoClienteConta($this->dados['pagador']['pagador_id'], $cobranca['Charge']['Customer']['galaxPayId'], $this->dados['conta_id']);
        }
        $modeloItemRemessa = $this->getModelItemRessa();
        $itemremessa = $modeloItemRemessa->findByMovimentacaoId($this->dados['movimentacao_id'], true);
        if (!$itemremessa) {
            throw new Exception('Item de remessa não encontrado para os dados fornecidos.');
        }
        if (!empty($itemremessa['Itemremessa']['linha_digitavel']) &&
            !empty($itemremessa['Itemremessa']['codigo_barras']) &&
            !empty($itemremessa['Itemremessa']['ativo'])) {
            return [
                'linha_digitavel' => $itemremessa['Itemremessa']['linha_digitavel'],
                'codigo_barras' => $itemremessa['Itemremessa']['codigo_barras'],
                'numero_documento' => $cobranca['Itemremessa']['numero_documento'],
                'nosso_numero' => $cobranca['Itemremessa']['nosso_numero'],
                'qr_code' => $itemremessa['Itemremessa']['qr_code'],
            ];
        }
        if (!empty($cobranca['Charge']['Transactions'][0]) || !empty($cobranca['Charges'][0]['Transactions'][0])) {
            try {
                $transation = $cobranca['Charge']['Transactions'][0] ?? $cobranca['Charges'][0]['Transactions'][0];
                $itemremessa['Itemremessa'] = array_merge($itemremessa['Itemremessa'], [
                    'situacao' => 'ENVIADO',
                    'tipo' => 'REMESSA',
                    'identificacao_ocorrencia' => '01',
                    'numero_documento' => $transation['Boleto']['bankNumber'],
                    'nosso_numero' => $transation['Boleto']['bankNumber'],
                    'id_boleto' => $transation['galaxPayId'],
                    'linha_digitavel' => $transation['Boleto']['bankLine'],
                    'codigo_barras' => $transation['Boleto']['barCode'],
                    'url_boleto' => $transation['Boleto']['pdf'],
                    'qr_code' => $transation['Pix']['qrCode'],
                ]);
                $modeloItemRemessa->id = $itemremessa['Itemremessa']['id'];
                $modeloItemRemessa->create();
                if (!$modeloItemRemessa->save($itemremessa)) {
                    throw new Exception('Erro ao salvar novo registro de remessa.');
                }
                $itemremessaId = $modeloItemRemessa->id;
                $arquivosItemremessaModel = $this->getModelArquivoItemRessa();
                $data = [
                    'ArquivosItemremessa' => [
                        'itemremessa_id' => $itemremessaId,
                        'arquivo_id' => 0,
                        'linha' => '1'
                    ]
                ];
                $arquivosItemremessaModel->create();
                if (!$arquivosItemremessaModel->save($data)) {
                    throw new Exception('Erro ao salvar vínculo entre item de remessa e arquivo.');
                }
                return [
                    'numero_documento' => $transation['Boleto']['bankNumber'],
                    'nosso_numero' => $transation['Boleto']['bankNumber'],
                    'linha_digitavel' => $transation['Boleto']['bankLine'],
                    'codigo_barras' => $transation['Boleto']['barCode'],
                    'url_boleto' => $transation['Boleto']['pdf'],
                    'qr_code' => $transation['Pix']['qrCode']
                ];
            } catch (Exception $e) {
                $errorMessage = 'Ocorreu um erro ao processar a solicitação.';
                if ($e->hasResponse()) {
                    $response = $e->getResponse();
                    $responseBody = json_decode($response->getBody()->getContents(), true);
                    if (isset($responseBody['error']['message'])) {
                        $errorMessage = 'Erro: ' . $responseBody['error']['message'];
                    }
                }
                return throw new Exception($errorMessage . " Linha: {$e->getLine()}", 1001);
            }
        }
        throw new Exception('Não foi possível gerar o boleto no momento. Tente novamente mais tarde.');
    }

    /**
     * @param $pessoaId
     * @param $customerId
     * @param $contaId
     * @throws Exception
     */
    private function CriaVinculoClienteConta($pessoaId, $customerId, $contaId): void
    {
        $clienteContaModel = $this->getModelClienteConta();
        $contaModel = $this->getModelConta();
        $contaExiste = $contaModel->find('count', [
            'conditions' => ['Conta.id' => $contaId]
        ]);
        if ($contaExiste == 0) {
            throw new Exception("Erro: A conta ID $contaId não existe na tabela 'contas'.");
        }
        $clienteConta = $clienteContaModel->find('first', [
            'conditions' => [
                'ClienteConta.pessoa_id' => $pessoaId,
                'ClienteConta.conta_id' => $contaId,
                'ClienteConta.customer_id' => $customerId
            ]
        ]);
        if (!$clienteConta) {
            $clienteContaModel->create();
            $clienteContaModel->save([
                'ClienteConta' => [
                    'pessoa_id' => $pessoaId,
                    'conta_id' => $contaId,
                    'customer_id' => $customerId
                ]
            ]);
        }
    }

    /**
     * @param $pessoaId
     * @param $contaId
     * @return bool|string
     */
    private function getCustomerId($pessoaId, $contaId): bool|string
    {
        $clienteContaModel = $this->getModelClienteConta();
        $clienteConta = $clienteContaModel->find('first', [
            'conditions' => [
                'ClienteConta.pessoa_id' => $pessoaId,
                'ClienteConta.conta_id' => $contaId,
            ]
        ]);
        if (!empty($clienteConta)) {
            $clienteContaId = $clienteConta['ClienteConta']['customer_id'];
        } else {
            $clienteContaId = false;
        }
        return $clienteContaId;
    }

    /**
     * Monta os headers necessários para requisição.
     */
    private function prepareHeaders(): array
    {
        return [
            'Authorization' => 'Bearer ' . $this->token['access_token'],
            'Content-Type' => 'application/json',
            'Accept' => 'application/json'
        ];
    }

    /**
     * Remove caracteres não numéricos de um CEP.
     *
     * @param string $string
     * @return string
     */
    private function removerCaracteresNaoNumericDoTexto(string $string): string
    {
        return preg_replace('/\D/', '', $string);
    }

    /**
     * Remove os acentos de um texto.
     *
     * @param ?string $texto
     * @return string
     */
    private function removerAcentos(?string $texto): string
    {
        if (is_null($texto)) return '';
        return trim(strtr($texto, [
            'á' => 'a', 'à' => 'a', 'ã' => 'a', 'â' => 'a', 'ä' => 'a',
            'Á' => 'A', 'À' => 'A', 'Ã' => 'A', 'Â' => 'A', 'Ä' => 'A',
            'é' => 'e', 'è' => 'e', 'ê' => 'e', 'ë' => 'e',
            'É' => 'E', 'È' => 'E', 'Ê' => 'E', 'Ë' => 'E',
            'í' => 'i', 'ì' => 'i', 'î' => 'i', 'ï' => 'i',
            'Í' => 'I', 'Ì' => 'I', 'Î' => 'I', 'Ï' => 'I',
            'ó' => 'o', 'ò' => 'o', 'õ' => 'o', 'ô' => 'o', 'ö' => 'o',
            'Ó' => 'O', 'Ò' => 'O', 'Õ' => 'O', 'Ô' => 'O', 'Ö' => 'O',
            'ú' => 'u', 'ù' => 'u', 'û' => 'u', 'ü' => 'u',
            'Ú' => 'U', 'Ù' => 'U', 'Û' => 'U', 'Ü' => 'U',
            'ç' => 'c', 'Ç' => 'C'
        ]));
    }

    /**
     * @return bool|object
     */
    private function getModelItemRessa(): object|bool
    {
        return ClassRegistry::init('R2boletos.Itemremessa');
    }

    /**
     * @return bool|object
     */
    private function getModelArquivoItemRessa(): object|bool
    {
        return ClassRegistry::init('R2boletos.ArquivosItemremessa');
    }

    /**
     * @return bool|object
     */
    private function getModelClienteConta(): object|bool
    {
        return ClassRegistry::init('r2bancos.ClienteConta');
    }

    /**
     * @return bool|object
     */
    private function getModelConta(): object|bool
    {
        return ClassRegistry::init('r2bancos.Conta');
    }

    /**
     * @return bool|object
     */
    private function getGuzzleHttpClient(): object|bool
    {
        return new Client();
    }

    /**
     * @return array
     * @throws Exception
     */
    private function montaCustumer(): array
    {
        $documentoPagador = $this->removerCaracteresNaoNumericDoTexto($this->dados['pagador']['documento']);
        $cep = $this->removerCaracteresNaoNumericDoTexto($this->dados['pagador']['cep']);
        $bairro = $this->removerAcentos($this->dados['pagador']['bairro']);
        $street = $this->removerAcentos($this->dados['pagador']['endereco_unico']);
        $addressNumber = $this->removerAcentos($this->dados['pagador']['numero']);
        $complement = $this->removerAcentos($this->dados['pagador']['complemento']);
        $city = $this->removerAcentos($this->dados['pagador']['cidade']);
//        $galaxPayId = (int) $this->dados['pagador']['cliente_conta_id'] > 0 ? (int) $this->dados['pagador']['cliente_conta_id'] : null;
        $emailPagador = $this->dados['pagador']['email'] ?? null;
        $statePagador = $this->dados['pagador']['uf'] ?? null;
        return [
            'myId' => $this->dados['pagador']['pagador_id'], //string-255 Id referente no seu sistema, para salvar no cel_cash. Para utilizar um existente preencha apenas este campo. Caso queira atualizar algum dado, informe apenas os campos que deseja.
//            'galaxPayId' => $galaxPayId,                     //int-11 ID do cliente no cel_cash. Para utilizar um cliente existente preencha este campo. Para cadastrar um cliente novo, esse campo NÃO pode ser passado, pois é gerado pelo cel_cash.
            'name' => $this->dados['pagador']['nome'],       //string-255 Nome ou razão social do cliente.
            'document' => $documentoPagador,                 //string-14 CPF OU CNPJ do cliente. Apenas números.
            'emails' => [
                $emailPagador                                //array de string-255 Emails do cliente. Separe cada email por vírgula.
            ],
//            'phones' => [
//                3140201512,
//                31983890110
//            ],
            'Address' => [
                'zipCode' => $cep,                           //string-8 CEP. Informe apenas números.
                'street' => $street,
                'number' => $addressNumber,
                'complement' => $complement,
                'neighborhood' => $bairro,
                'city' => $city,
                'state' => $statePagador
            ]
        ];
    }

    /**
     * @return array
     */
    private function montaPaymentMethodBoleto(): array
    {
        $instructions = '';
        foreach ($this->dados['descricaoDemonstrativo'] as $descricaoDemonstrativo) {
            if (empty($descricaoDemonstrativo)) continue;
            $instructions .= $this->removerAcentos($descricaoDemonstrativo) . "\n";
        }
        $numeroDocumento = $this->dados['numeroDocumento'] ?? $this->dados['numero_documento'];
        $instruction = [
            'instructions' => $instructions,                    //string Instruções do boleto. Irá ser acrescentado na área 'Referente a' do boleto. Para quebrar linha utilize "\n", sendo que será exibido no máximo 3 linhas. Caso não informado será utilizado o padrão definido no sistema.
            'deadlineDays' => 1,                                //int Quantidade de dias que o boleto pode ser pago após o vencimento. Caso não informado será utilizado o padrão definido no sistema. Valores válidos de 0 a 59.
            'documentNumber' => $numeroDocumento,               //string Irá ser acrescentado na área 'Nº Documento' do boleto. Caso não informado será utilizado o padrão definido no sistema.
//            'Agreement' => [                                    //Convênio próprio no banco emissor
//                'name' => 'Lorem ipsum',                        //string Nome do beneficiário final/sacador avalista
//                'document' => '012345678909'                    //string Documento do beneficiário final/sacador avalista
//            ]
        ];
        if (!empty($this->dados['multa_em_percentual']) && $this->dados['multa_em_percentual'] >= '0.01') {
            $instruction['fine'] = (double) $this->dados['multa_em_percentual'];        //int Percentual de multa, com dois decimais sem o separador. Caso não informado será utilizado o percentual definido no sistema.
        }
        if (!empty($this->dados['mora_dia_em_percentual']) && $this->dados['mora_dia_em_percentual'] >= '0.01') {
            $instruction['interest'] = (double) $this->dados['mora_dia_em_percentual']; //int Percentual de juros, com dois decimais sem o separador. Caso não informado será utilizado o percentual definido no sistema.
        }
        return $instruction;
    }

    /**
     * @return array
     */
    private function montaPaymentMethodPix(): array
    {
        $instructions = $this->removerAcentos($this->dados['descricaoDemonstrativo'][0]);
        $instruction = [
            'instructions' => $instructions,                                            //string Instruções do QR Code Pix. Informação exibida nos detalhes do QR Code. Caso não informado será utilizado o padrão definido na plataforma.
            'Deadline' => [                                                             //Expiração do QR Code. Caso não informado, será utilizado o padrão definido no sistema.
                'type' => 'days',                                                       //string-255 Tipo da expiração do QR Code.
                'value' => 60                                                           //int-11 Valor da expiração do QR Code (em dias ou minutos).
            ]
        ];
        if (!empty($this->dados['multa_em_percentual']) && $this->dados['multa_em_percentual'] >= '0.01') {
            $instruction['fine'] = (double) $this->dados['multa_em_percentual'];        //int Percentual de multa, com dois decimais sem o separador. Caso não informado será utilizado o percentual definido no sistema.
        }
        if (!empty($this->dados['mora_dia_em_percentual']) && $this->dados['mora_dia_em_percentual'] >= '0.01') {
            $instruction['interest'] = (double) $this->dados['mora_dia_em_percentual']; //int Percentual de juros, com dois decimais sem o separador. Caso não informado será utilizado o percentual definido no sistema.
        }
        return $instruction;
    }

    private function montaDebtor()
    {
        $documentoPagador = $this->removerCaracteresNaoNumericDoTexto($this->dados['pagador']['documento']);
        $cep = $this->removerCaracteresNaoNumericDoTexto($this->dados['pagador']['cep']);
        $bairro = $this->removerAcentos($this->dados['pagador']['bairro']);
        $addressNumber = $this->removerAcentos($this->dados['pagador']['numero']);
        $complement = $this->removerAcentos($this->dados['pagador']['complemento']);
        $address = $this->removerAcentos($this->dados['pagador']['endereco']);
        return [
            'name' => $this->dados['pagador']['nome'],
            'document' => $documentoPagador,
            'postalCode' => $cep,
            'publicArea' => $address,
            'number' => $addressNumber,
            'complement' => $complement,
            'neighborhood' => $bairro,
            'city' => $this->dados['pagador']['cidade'],
            'state' => $this->dados['pagador']['uf']
        ];
    }

    private function montaReceiver()
    {
        $documentoBeneficiario = $this->removerCaracteresNaoNumericDoTexto($this->dados['beneficiario']['documento']);
        return ['document' => $documentoBeneficiario, 'account' => $this->dados['conta']];
    }

    /**
     * @return array{discount: array, fine: float, interest: float}
     */
    private function montaInstruction(): array
    {
        $instruction = [];
        if (!empty($this->dados['multa_em_percentual']) && $this->dados['multa_em_percentual'] >= '0.01') {
            $instruction['fine'] = (double) $this->dados['multa_em_percentual'];
        }
        if (!empty($this->dados['mora_dia_em_percentual']) && $this->dados['mora_dia_em_percentual'] >= '0.01') {
            $instruction['interest'] = (double) $this->dados['mora_dia_em_percentual'];
        }
        if (!empty($this->dados['desconto'])) {
            $instruction['discount'] = [
                'amount' => $this->dados['desconto'],
                'modality' => 'fixed',
                'limitDate' => '2025-12-20T00:00:00.0000000'
            ];
        }
        return $instruction;
    }

    /**
     * @return array
     */
    private function montaSplit(): array
    {
        $rateio = $this->dados['rateio'] ?? [];
        if (empty($rateio) || !isset($rateio[0])) {
            return [];
        }

        $companies = [];
        foreach ($rateio as $valor) {
            $galaxPayId = (int) $valor['conta_repasse'];
            $companies[$galaxPayId] = [
                'galaxPayId' => 18958,                   //int-11 Id no cel_cash da empresa destinatária.
                'value' => (int) 5000              //int-11 Valor a ser dividido. Enviar valor em centavos ou percentual com duas casas decimais sem dígito separador
            ];
        }
        return [
            'Split' => [
                'all' => [
                    'type' => $rateio[0]['type'] ?? 'percent',   //string-30 Tipo da divisão. percent = Percentual (%), fixed = Valor fixo (R$).
                    'Companies' => $companies
                ]
            ]
        ];
    }

    /**
     * Verificar Documento Asaas.
     *
     * @return array|true
     * @throws GuzzleException
     * @throws Exception
     */
    public function verificarSeExisteContaParaCpfCnpj(): bool|array
    {
        $hasCpfCnpj = $this->dados['dado_empresa']['Pessoa']['cpf_cnpj'] ?? $this->dados['dado_responsavel']['Pessoa']['cpf_cnpj'];
        $cpfCnpj = $this->removerCaracteresNaoNumericDoTexto($hasCpfCnpj);
        $wallet = ClassRegistry::init('R2bancos.Wallet');
        $cateira = $wallet->find('first', ['conditions' => ['Wallet.cpf_cnpj' => $cpfCnpj]]);
        if (!empty($cateira['Wallet'])) {
            return $cateira['Wallet'];
        }
        $hasSubContaCelcoin = $this->buscaSubContaCelCash();
        if (!empty($hasSubContaCelcoin['SubAccounts'][0])) {
            return $hasSubContaCelcoin['SubAccounts'][0];
        }
        return false;
    }

    /**
     * @return array
     * @throws Exception
     */
    private function montaResponsavelPelaConta(): array
    {
        if (!empty($this->dados['dado_empresa']['Pessoa']['foto'])) {
            $logoFoto = (new logofoto($this->dados['dado_empresa']['Pessoa']['foto']))->getEnderecoDaLogoFoto();
            $url = isR2Aplicativos::getUrlSistema() . '/' . str_replace('/home', '', $logoFoto);
            $conteudoImagem = file_get_contents($url);
            if ($conteudoImagem !== false) {
                $base64 = base64_encode($conteudoImagem);
                $base64LogoLimpo = preg_replace('/^data:.*;base64,/', '', $base64);
            }
        }
        $cnpj = R2CnpjService::cnpj($this->dados['dado_empresa']['Pessoa']['cpf_cnpj']);
        $typeCompany = 'ltda';
//        if (!empty($cnpj['all']['natureza_juridica']['codigo']))
//            $typeCompany = $this->typeCompany($cnpj['all']['natureza_juridica']['codigo']);
        $cnab = $cnpj['filial'][0]['cnae_fiscal_principal'];
        $razaoSocial = $this->removerAcentos($cnpj['all']['razao_social_nome_empresarial']);
        $name = $this->removerAcentos($this->dados['dado_empresa']['Pessoa']['name']);
        $email = $this->removerAcentos($this->dados['dado_empresa']['Pessoa']['email']);
        $softDescriptor = $this->removerAcentos($this->dados['dado_empresa']['responsavel']['softDescriptor']);
        if (!empty($softDescriptor) && mb_strlen($softDescriptor) > 0) {
            $softDescriptor = mb_substr($softDescriptor, 0, 17);
        }
        $documento = $this->removerCaracteresNaoNumericDoTexto($this->dados['dado_empresa']['Pessoa']['cpf_cnpj']);
        $cep = $this->removerCaracteresNaoNumericDoTexto($this->dados['dado_empresa']['Endereco']['cep']);
        $documentoResponsavel = $this->removerCaracteresNaoNumericDoTexto($this->dados['dado_empresa']['responsavel']['Pessoa']['cpf_cnpj']);
        $numeroTelefone = $this->removerCaracteresNaoNumericDoTexto($this->dados['dado_empresa']['Telefone'][0]['numero']);
        $bairro = $this->removerAcentos($this->dados['dado_empresa']['Endereco']['bairro']);
        $addressNumber = $this->removerAcentos($this->dados['dado_empresa']['Endereco']['numero']);
        $complement = $this->removerAcentos($this->dados['dado_empresa']['Endereco']['complemento'] ?? '');
        $address = $this->removerAcentos($this->dados['dado_empresa']['Endereco']['name']);
        $city = $this->removerAcentos($this->dados['dado_empresa']['Endereco']['Cidade']['name']);
        $state = $this->removerAcentos($this->dados['dado_empresa']['Endereco']['Cidade']['Estado']['sigla']);
        return [
            'name' => $name,
            'document' => $documento,
            'nameDisplay' => $razaoSocial,
            'phone' => $numeroTelefone,
            'emailContact' => $email,
            'logo' => $base64LogoLimpo ?? null,
            'responsibleDocument' => $documentoResponsavel,
            'typeCompany' => $typeCompany,
            'canAccessPlatform' => false,
            'softDescriptor' => $softDescriptor,
            'cnae' => $cnab['codigo'],
            'Address' => [
                'zipCode' => $cep,
                'street' => $address,
                'number' => $addressNumber,
                'complement' => $complement,
                'neighborhood' => $bairro,
                'city' => $city,
                'state' => $state
            ]
        ];
    }

    /**
     * @return array
     */
    private function montaDadosEditarConta(): array
    {
        if (!empty($this->dados['foto'])) {
            $logoFoto = (new logofoto($this->dados['foto']))->getEnderecoDaLogoFoto();
            $url = isR2Aplicativos::getUrlSistema() . '/' . str_replace('/home', '', $logoFoto);
            $conteudoImagem = @file_get_contents($url);
            if ($conteudoImagem !== false) {
                $base64 = base64_encode($conteudoImagem);
                $base64LogoLimpo = preg_replace('/^data:.*;base64,/', '', $base64);
            }
        }
        $cep = !empty($this->dados['Endereco']['cep']) ? $this->removerCaracteresNaoNumericDoTexto($this->dados['Endereco']['cep']) : null;
        $bairro = !empty($this->dados['Endereco']['bairro']) ? $this->removerAcentos($this->dados['Endereco']['bairro']) : null;
        $addressNumber = !empty($this->dados['Endereco']['numero']) ? $this->removerAcentos($this->dados['Endereco']['numero']) : null;
        $complement = !empty($this->dados['Endereco']['complemento']) ? $this->removerAcentos($this->dados['Endereco']['complemento']) : null;
        $address = !empty($this->dados['Endereco']['name']) ? $this->removerAcentos($this->dados['Endereco']['name']) : null;
        $city = !empty($this->dados['Endereco']['Cidade']['name']) ? $this->removerAcentos($this->dados['Endereco']['Cidade']['name']) : null;
        $state = !empty($this->dados['Endereco']['Cidade']['Estado']['sigla']) ? $this->removerAcentos($this->dados['Endereco']['Cidade']['Estado']['sigla']) : null;
        $dados = [
            'Address' => [
                'zipCode' => $cep,
                'street' => $address,
                'number' => $addressNumber,
                'complement' => $complement,
                'neighborhood' => $bairro,
                'city' => $city,
                'state' => $state
            ],
            'logo' => $base64LogoLimpo ?? null
        ];
        $dados['Address'] = array_filter($dados['Address'], function ($value) {
            return !is_null($value);
        });
        return array_filter($dados, function ($value) {
            return !is_null($value);
        });
    }

    /**
     * @return array
     */
    private function montaEnvioDocumentoObrigatorioSubcontaTipoCNPJ(): array
    {
        $valorEmCentavos = (int) round($this->dados['Conta']['monthlyIncome'] * 100);
        $documentoAssociado = $this->removerCaracteresNaoNumericDoTexto($this->dados['Associate'][0]['document']);
        return [
            'Fields' => [
                'monthlyIncome' => $valorEmCentavos,
                'about' => $this->dados['Conta']['about'],
                'socialMediaLink' => $this->dados['Conta']['socialMediaLink']
            ],
            'Associate' => [
                [
                    'document' => $documentoAssociado,
                    'name' => $this->dados['Associate'][0]['name'],
                    'motherName' => $this->dados['Associate'][0]['motherName'],
                    'birthDate' => $this->dados['Associate'][0]['birthDate'] ?? '2000-06-04',
                    'type' => $this->dados['Associate'][0]['type']
                ]
            ],
            'Documents' => [
                'Company' => [
                    'lastContract' => $this->dados['Documents']['Company']['lastContract'],
                    'cnpjCard' => $this->dados['Documents']['Company']['cnpjCard'],
                    'electionRecord' => $this->dados['Documents']['Company']['electionRecord'],
                    'statute' => $this->dados['Documents']['Company']['statute']
                ],
                'Personal' => [
                    'CNH' => [
                        'selfie' => $this->dados['Documents']['Personal']['CNH']['rgSelfie'],
                        'picture' => [
                            $this->dados['Documents']['Personal']['CNH']['rgFront'],
                            $this->dados['Documents']['Personal']['CNH']['rgBack']
                        ]
                    ],
                    'RG' => [
                        'selfie' => $this->dados['Documents']['Personal']['RG']['rgSelfie'],
                        'front' => $this->dados['Documents']['Personal']['RG']['rgFront'],
                        'back' => $this->dados['Documents']['Personal']['RG']['rgBack']
                    ]
                ]
            ]
        ];
    }

    /**
     * @return array
     */
    private function montaEnvioDocumentoObrigatorioSubcontaTipoCPF(): array
    {
        $valorEmCentavos = (int) round($this->dados['Conta']['monthlyIncome'] * 100);
        $dataNascimentoIso = DateTime::createFromFormat('d/m/Y',$this->dados['Conta']['birthDate'])->format('Y-m-d');
        return [
            'Fields' => [
                'motherName' => $this->dados['Conta']['motherName'],
                'birthDate' => $dataNascimentoIso,
                'monthlyIncome' => $valorEmCentavos,
                'about' => $this->dados['Conta']['about'],
                'socialMediaLink' => $this->dados['Conta']['socialMediaLink']
            ],
            'Documents' => [
                'Personal' => [
                    'CNH' => [
                        'selfie' => $this->dados['Documents']['Personal']['CNH']['selfie'],
                        'picture' => [
                            $this->dados['Documents']['Personal']['CNH']['front'],
                            $this->dados['Documents']['Personal']['CNH']['back']
                        ],
                        'address' => $this->dados['Documents']['Personal']['CNH']['address']
                    ],
                    'RG' => [
                        'selfie' => $this->dados['Documents']['Personal']['RG']['selfie'],
                        'front' => $this->dados['Documents']['Personal']['RG']['front'],
                        'back' => $this->dados['Documents']['Personal']['RG']['back'],
                        'address' => $this->dados['Documents']['Personal']['RG']['address']
                    ]
                ]
            ]
        ];
    }

    /**
     * @return array
     * @throws Exception
     */
    private function montaProprietarioDaConta(): array
    {
        $name = $this->removerAcentos($this->dados['dado_responsavel']['Pessoa']['name']);
        $motherName = $this->removerAcentos($this->dados['dado_responsavel']['Fisica']['mae']);
        $parterName = $this->removerAcentos($this->dados['dado_responsavel']['Fisica']['pai']);
        $email = $this->removerAcentos($this->dados['dado_responsavel']['Pessoa']['email']);
        $documento = $this->removerCaracteresNaoNumericDoTexto($this->dados['dado_responsavel']['Pessoa']['cpf_cnpj']);
        $cep = $this->removerCaracteresNaoNumericDoTexto($this->dados['dado_responsavel']['Endereco']['cep']);
        $numeroTelefone = $this->removerCaracteresNaoNumericDoTexto($this->dados['dado_responsavel']['Telefone'][0]['numero']);
        $bairro = $this->removerAcentos($this->dados['dado_responsavel']['Endereco']['bairro']);
        $addressNumber = $this->removerAcentos($this->dados['dado_responsavel']['Endereco']['numero']);
        $comprements = strlen(trim($this->dados['dado_responsavel']['Endereco']['complemento'])) > 0 ? $this->dados['dado_responsavel']['Endereco']['complemento'] : $this->dados['dado_responsavel']['Endereco']['name'];
        $complement = $this->removerAcentos($comprements);
        $address = $this->removerAcentos($this->dados['dado_responsavel']['Endereco']['name']);
        $city = $this->removerAcentos($this->dados['dado_responsavel']['Endereco']['Cidade']['name']);
        $state = $this->removerAcentos($this->dados['dado_responsavel']['Endereco']['Cidade']['Estado']['sigla']);
        $softDescriptor = $this->removerAcentos($this->dados['dado_responsavel']['responsavel']['softDescriptor']);
        if (!empty($softDescriptor) && mb_strlen($softDescriptor) > 0) {
            $softDescriptor = mb_substr($softDescriptor, 0, 17);
        }
        return [
            'name' => $name,
            'document' => $documento,
            'phone' => $numeroTelefone,
            'emailContact' => $email,
            'motherName' => $motherName,
            'parterName' => $parterName,
            'birthDate' => $this->dados['dado_responsavel']['Fisica']['data_nascimento'],
            'canAccessPlatform' => false,
            'softDescriptor' => $softDescriptor,
            'Professional' => [
                'internalName' => 'others',
                'inscription' => '14525'
            ],
            'Address' => [
                'zipCode' => $cep,
                'street' => $address,
                'number' => $addressNumber,
                'complement' => $complement,
                'neighborhood' => $bairro,
                'city' => $city,
                'state' => $state
            ]
        ];
    }

    /**
     * @param $type
     * @return string|null
     */
    private function typeCompany($type): ?string
    {
        $categorias = [
            'ltda' => ['2062', '2240'],
            'eireli' => ['2305', '2313'],
            'association' => ['3069', '3204', '3212', '3301', '3999'],
            'individualEntrepreneur' => ['2135'],
            'mei' => ['2135'],
            'sa' => ['2046', '2054'],
            'slu' => ['2321']
        ];
        $chaveEncontrada = null;
        foreach ($categorias as $chave => $codigos) {
            if (in_array($type, $codigos)) {
                $chaveEncontrada = $chave;
                break;
            }
        }
        return $chaveEncontrada;
    }

    /**
     * @param ClientException $e
     * @param string $mensagemPadrao
     * @param string $metodo
     * @return string
     */
    private function tratarErroClientException(ClientException $e, string $mensagemPadrao, string $metodo): string
    {
        $error = json_decode($e->getResponse()->getBody()->getContents(), true);
        $mensagem = "Erro em $metodo: ";
        if (isset($error['error']['message'])) {
            $mensagem .= $error['error']['message'];
            if (!empty($error['error']['details']) && is_array($error['error']['details'])) {
                $detalhes = [];
                foreach ($error['error']['details'] as $campo => $mensagens) {
                    foreach ((array) $mensagens as $mensagemDetalhe) {
                        $detalhes[] = "$campo: $mensagemDetalhe";
                    }
                }
                $mensagem .= ' Detalhes: ' . implode(' | ', $detalhes);
            }
            return $mensagem;
        }
        return $mensagem . $mensagemPadrao;
    }

    /**
     * @param $galaxIdAndGalaxHash
     * @return void
     * @throws Exception
     */
    private function registraWebhook($galaxIdAndGalaxHash): void
    {
        $configBD = $_SESSION['Auth']['User']['empresa_id'];
        $url = getenv('URL_PJBANK') . "/webhook?system=celcoin&configuracaoBD=$configBD";
        try {
            $client = $this->getGuzzleHttpClient();
            $token = json_decode($client->post($this->url['authDevCach'], [
                'headers' => ['Authorization' => 'Basic ' . base64_encode($galaxIdAndGalaxHash), 'Content-Type' => 'application/json'],
                'json' => ['grant_type' => 'authorization_code', 'scope' => 'webhooks.write']])->getBody(), true);
            $client->put($this->url['webhook'], [
                'headers' => ['Authorization' => 'Bearer ' . $token, 'Content-Type' => 'application/json', 'Accept' => 'application/json'],
                'json' => ['url' => $url, 'events' => ['transaction.updateStatus']]]);
        } catch (ClientException $e) {
            $messageError = $this->tratarErroClientException($e, 'Ocorreu um erro ao processar a solicitação.', 'registraWebhook');
            throw new Exception($messageError, 1001);
        }
    }
}
